<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\ConnectionManager;
use App\View\Helper\FunctionsHelper;
use PDO;

class AjaxController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Ubigeo');
        $this->loadModel('EstExperimental');
        $this->loadModel('Collection');
        $this->loadModel('Specie');
        $this->loadModel('Pasaporte');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');
        $this->loadModel('PassportFito');
        $this->loadModel('PassportMicro');
        $this->loadModel('PassportZoo');
        $this->loadModel('ConfigTable');
        $this->loadModel('Descriptor');
        $this->loadModel('DescriptorState');
        $this->loadModel('Station');
        $this->loadModel('User');
        $this->loadModel('Clients');
        $this->loadModel('Module');
    }

    public function index()
    {
    }


    public function exportarExcel($columns=null,$data_rows=null,$titulo = null,$letraInicio=0,$inicioFila=0)
    {
        if(count($data_rows)>0) {

                $letraDefault=65;

                //Inicio Columna 'A' valor minimo adicional cero
                $letra=$letraDefault+$letraInicio;

                //Inicio Fila mÃ­nimo 2

                $letraFinal=0;
                $abecedario=$this->Functions->generarAbecedarioExcel($letraInicio,count($columns));
                $objPHPExcel = new \PHPExcel();



                 $estiloTitle = array(
                                  'font' => array(
                                            'name'     => 'Calibri',
                                            'bold'     => true,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 14,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'alignment' =>  array(
                                      'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                      'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                      'rotation'   => 0,
                                      'wrap'       => TRUE
                                    )
                        );

                  $estiloColumna = array(
                                  'font' => array(
                                            'name'     => 'Calibri',
                                            'bold'     => true,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 11,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'borders' => array(
                                        'allborders' => array(
                                          'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                                    'fill' => array(
                                    'type'  => \PHPExcel_Style_Fill::FILL_SOLID,
                                    'color' => array(
                                    'rgb' => '02bf69')
                                    ),
                                    'alignment' =>  array(
                                      'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                      'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                      'rotation'   => 0,
                                      'wrap'       => TRUE
                                    )
                        );

                  $estiloRows = array(
                                  'font' => array(
                                            'name'     => 'Calibri',
                                            'bold'     => false,
                                            'italic'   => false,
                                            'strike'   => false,
                                            'size'     => 11,
                                            'color' => array(
                                                'rgb' => '000000'
                                            )
                                    ),
                                    'borders' => array(
                                        'allborders' => array(
                                          'style' => \PHPExcel_Style_Border::BORDER_THIN
                                        )
                                    ),
                                    'alignment' =>  array(
                                      'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                      'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                      'rotation'   => 0,
                                      'wrap'       => TRUE
                                    )
                        );



                // Titulo del reporte
                //$objPHPExcel->setActiveSheetIndex(0)->setCellValue(chr($letra).($inicioFila+2),$titulo);
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($abecedario[0].($inicioFila+2),$titulo);

                $objPHPExcel->getActiveSheet()->getStyle($abecedario[0].($inicioFila+2))->applyFromArray($estiloTitle);

                foreach ($columns as $key => $value) {

                        // $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension(chr($key+$letra))->setAutoSize(TRUE);
                        // $objPHPExcel->setActiveSheetIndex(0)->setCellValue(chr($key+$letra).($inicioFila+3),$value);
                        // $objPHPExcel->getActiveSheet()->getStyle(chr($key+$letra).($inicioFila+3))->applyFromArray($estiloColumna);

                    $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($abecedario[$key])->setAutoSize(TRUE);
                        $objPHPExcel->setActiveSheetIndex(0)->setCellValue($abecedario[$key].($inicioFila+3),$value);
                        $objPHPExcel->getActiveSheet()->getStyle($abecedario[$key].($inicioFila+3))->applyFromArray($estiloColumna);
                }

                foreach ($data_rows as $key => $value) {

                        //$objPHPExcel->setActiveSheetIndex(0)->setCellValue(chr($letra).($key+$inicioFila+4),$key+1);
                        //$objPHPExcel->getActiveSheet()->getStyle(chr($letra).($key+$inicioFila+4))->applyFromArray($estiloRows);

                        foreach ($value  as $index => $dataRow) {

                                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($abecedario[$index].($key+$inicioFila+4),$dataRow);
                                $objPHPExcel->getActiveSheet()->getStyle($abecedario[$index].($key+$inicioFila+4))->applyFromArray($estiloRows);
                                $letraFinal=$index+$letra+1;

                        }

                }

                //$objPHPExcel->setActiveSheetIndex(0)->mergeCells(chr($letra).($inicioFila+2).':'.chr($letraFinal-1).($inicioFila+2));
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells($abecedario[0].($inicioFila+2).':'.$abecedario[count($abecedario)-1].($inicioFila+2));


                //$titulo_tab=explode('-',  $this->gettitulo($titulo));
                //$titulo_tabs=explode('(',  $titulo_tab[0]);
                $objPHPExcel->getActiveSheet()->setTitle(strlen($titulo)>30?'Lista de Resultados':$titulo);
                $objPHPExcel->setActiveSheetIndex(0);

                header('Content-Type: text/html;charset=UTF-8');
                header('Content-Transfer-Encoding: none');
                header('Content-Type: application/vnd.ms-excel;');
                header("Content-type: application/x-msexcel");

                // header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                // header('Content-Disposition: attachment;filename='.$titulo.'.xlsx');
                // header('Cache-Control: max-age=0');

                // $objWriter = new \PHPExcel_Writer_Excel5($objPHPExcel);

                header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                $titulo = str_replace("-", "", str_replace(":", "", str_replace(" ", "_", $this->Functions->letterAccent(mb_strtolower($titulo, 'UTF-8'), 'lower'))));
                // pr($titulo); die();
                $filename = $titulo.".xlsx";

                header('Content-Disposition: attachment;filename='.$filename .' ');
                header('Cache-Control: max-age=0');
                $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
                // ob_start();
                // $objWriter->save('php://output');
                // $xlsData = ob_get_contents();
                ob_end_clean();
                $objWriter->save(WWW_ROOT.'reportes/'.$titulo.'.xlsx');
                $response =  array('msj' => 'ok', 'titulo' => $titulo);

                echo json_encode($response);
                exit;
        }
    }

    public function exportarDatos()
    {
        if ($this->request->is('ajax')) {

            $columns = json_decode($this->request->data('columnsJson'));
            $rows    = json_decode($this->request->data('datosJson'));
            $titulo  = $this->request->data('titulo');

            if(count($rows)>0) $this->exportarExcel($columns,$rows,$titulo,0,0);
        }
    }

    public function metodoexportar( $filename = null )
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $filePath = WWW_ROOT .'reportes'. DS . $filename .'.xlsx';

            $this->response->file($filePath , array('download'=> true));

            return $this->response;
        }
    }

    public function detalleespecie($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Specie->find()->where(['collection_id' => $id, 'status' => 1]);

            $concat = $detalle->func()->concat(['UPPER(genus)' => 'identifier', ' ', 'UPPER(species)' => 'identifier' ]);
            $detalle->select(['descripcion' => $concat, 'id']);
            $detalle->order([1,2]);

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /********************** INICIO GET NOMBRE COMUN DE LA ESPECIE ************************/
    public function getnombrecomun($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;

            $detalle = $this->Specie->find()->select(['nombre_comun' => 'UPPER(cropname)'])->where(['id' => $id, 'status' => 1])->first();
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }
    /********************** FIN  GET NOMBRE COMUN DE LA ESPECIE ************************/

    public function detallenombrecomun($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Specie->find()->where(['collection_id' => $id, 'status' => 1 ])->group('1,2');
            $concat = $detalle->func()->concat(['UPPER(genus)' => 'identifier', ' ', 'UPPER(species)' => 'identifier' ]);
            $detalle->select(['descripcion' => $concat, 'idx' => 'cropname']);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    //********************* BUSQUEDA DE LISTA DE ESPECIE SEGUN LA COLECCION - GESTION MAPAS ***************************//
    public function detalleespeciemapas($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Specie->find()->select(['id' , 'descripcion' => 'cropname'])->where(['collection_id' => $id, 'status' => 1 ])->group('1,2');
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }
    //********************* BUSQUEDA DE LISTA DE ESPECIE SEGUN LA COLECCION - GESTION MAPAS ***************************//

    public function detalleespeciestate($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Specie->find()->where(['collection_id' => $id, 'status' => 1])->order(['genus' => 'ASC']);
            $concat = $detalle->func()->concat([ 'UPPER(genus)' => 'identifier', ' ', 'UPPER(species)' => 'identifier' ]);
            $detalle->select(['descripcion' => $concat, 'id']);

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    //  public function detalleSpecie($id = null)
    // {

    //     if ($this->request->is('ajax')) {
    //         $this->autoRender = false;
    //         $detalle = $this->Specie->find()->where(['collection_id' => $id, 'status' => 1])->order(['genus' => 'ASC']);
    //         $concat = $detalle->func()->concat([ 'UPPER(genus)' => 'identifier',' ','UPPER(species)' => 'identifier']);
    //         $detalle->select(['descripcion' => $concat, 'id']);
    //         $resultj = json_encode($detalle);
    //         $this->response->type('json');
    //         $this->response->body($resultj);
    //         return $this->response;
    //     }
    // }

    /*************** Obtiene la lista de de colecciones segun el recurso seleccionado **************/
    public function detallerecursos( $id = null )
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Collection->find()->select(['id','descripcion'=>'colname'])->where(['resource_id' => $id, 'status' => '1'])->order(['colname' => 'ASC']);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /******************************* BUSCA EL PASAPORTE EN INSITU ACCESION *********************************/
    public function insitupassport($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $passport = $this->Passport->find()->where(['Passport.status' => 1, 'Passport.id' => $id])->first();

            if(!empty($passport['specie_id'])){
                $especie = $this->Specie->find()->where(['id' => $passport['specie_id']])->first();

                $detalle = ['othenumb' => $passport['othenumb'], 'cropname' => $especie['cropname']];

            } else {

                $detalle = ['othenumb' => $passport['othenumb'], 'cropname' => ''];
            }

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function detalleGenero($id = null)
    {

        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle =$this->Specie->find()->select(['descripcion' => 'species','id','genus'])->where(['status' => 1,'genus like '=>'%'.$id])->order(['genus' => 'ASC']);

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /** lista detalle condicion biologica fitogenetico **/
    public function condicionbiologica($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->OptionList->find()->where(['child_id' => $id, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /** Obtener datos pasaporte **/

    public function cargaPasaporteInvitro($id=null,$idrecurso=null)
    {

        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' =>$idrecurso,'PassportFito.invitro'=>33,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaPasaporteCampo($id=null,$idrecurso=null)
    {

        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                          ->leftJoinWith('Passport.Specie.Collection')
                                          ->where(['Passport.status' => '1', 'Passport.resource_id' =>$idrecurso,'PassportFito.bfield'=>39,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaPasaporteSemilla($id = nul,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' => $idrecurso,'PassportFito.bseed'=>36,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaPasaporteADN($id = null,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' => $idrecurso,'PassportFito.bdna'=>42,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaPasaporteADNZoo($id = null,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportZoo->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' => $idrecurso,'PassportZoo.bdna'=>42,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }


    public function cargaPasaporteADNMicro($id = null,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportMicro->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' => $idrecurso,'PassportMicro.bdna'=>42,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaPasaporteMicro($id = null,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {

            $this->autoRender = false;

            $passport =$this->PassportMicro->find()->contain('Passport.Specie.Collection')
                                         ->leftJoinWith('Passport.Specie.Collection')
                                         ->where(['Passport.status' => '1', 'Passport.resource_id' => 3,'Passport.accenumb'=>$id])->first();

            $resultj = json_encode($passport);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function cargaItemsReporte($idreporte=null,$idrecurso=null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $lista_reporte= $this->OptionList->find()->select(['id','name'])->where(['parent_id' => $idreporte, 'status' => 1 ])->all();

            $resultj = json_encode($lista_reporte);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function reporteEstacionExperimental($idrecurso=null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;

            $conn = ConnectionManager::get('default');
            $stmt = $conn->prepare(' SELECT sta.eea as estacion ,count(*) as total
                                     FROM passport as pass
                                     INNER JOIN station as sta on pass.station_origin_id=sta .id
                                     WHERE pass.resource_id=?
                                     GROUP BY sta.eea');

            $stmt->bindValue(1, 1, PDO::PARAM_STR);
            $stmt->execute();
            //$lista_resultado = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $lista_resultado = $stmt->fetchAll();

            $resultj = json_encode($lista_resultado);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;

        }
    }



    /** lista detalle condicion biologica zoogenetico **/
    public function condicionbiologicazoo($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->OptionList->find()->where(['child_id' => $id, 'status' => 1, 'OR' => [['resource_id' => 2], ['resource_id' => 4]] ]);

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /** lista detalle fuente fitogenetico **/
    public function detallefuente($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->OptionList->find()->where(['child_id' => $id, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /** lista detalle fuente zoogenetico **/
    public function detallefuentezoo($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->OptionList->find()->where(['child_id' => $id, 'status' => 1, 'OR' => [['resource_id' => 2], ['resource_id' => 4]]]);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /** lista detalle fuente microorganismo **/
    public function detallefuentemicro($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->OptionList->find()->where(['child_id' => $id, 'status' => 1, 'OR' => [['resource_id' => 3], ['resource_id' => 4]]]);
            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function departamento()
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $departamento = $this->Ubigeo->find()->select(['cod_dep', 'nombre'])->where(['cod_pro' => 0, 'cod_dis' => 0])->all();
            $resultj = json_encode($departamento);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function provincia($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $provincias = $this->Ubigeo->find()->select(['cod_pro','nombre'])->where(['cod_dep' => $id, 'cod_pro !=' => 0, 'cod_dis' => 0]);
            $resultj = json_encode($provincias);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /**************** INICIO GRABA SOLO HASTA DEPARTAMENTO Y PROVINCIA ***************/
    public function provinciaid($depid = null, $proid = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $provinciaid = $this->Ubigeo->find()->where(['cod_dep' => $depid, 'cod_pro' => $proid, 'cod_dis' => 0])->first();
            $resultj = json_encode($provinciaid);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function departamentoid($depid = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $departamentoid = $this->Ubigeo->find()->where(['cod_dep' => $depid, 'cod_pro' => 0, 'cod_dis' => 0])->first();
            $resultj = json_encode($departamentoid);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function nombreComun($depid = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $specie = $this->Specie->find()->select(['cropname'])->where(['id'=>$depid,'status'=>1])->first();
            $result = json_encode($specie);
            $this->response->type('json');
            $this->response->body($result);
            return $this->response;
        }
    }
    /**************** FIN GRABA SOLO HASTA DEPARTAMENTO Y PROVINCIA ***************/

    public function distrito($depid = null, $proid = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $distritos = $this->Ubigeo->find()->select(['id', 'nombre'])->where(['cod_dep' => $depid, 'cod_pro' => $proid, 'cod_dis !=' => 0]);
            $resultj = json_encode($distritos);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    //****************************** INICIO MANTENIMIENTO DE CATALOGOS - CARACTERIZACION ********************************//
    public function listacolecciones($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $collection = $this->Collection->find()->select(['id', 'descripcion' => 'colname'])->where(['resource_id' => $id, 'availability' => 1, 'status' => 1])->order(['colname']);
            $resultj = json_encode($collection);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function listaespecies($id = null)
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $detalle = $this->Specie->find()->where(['collection_id' => $id, 'status' => 1, 'availability' => 1])->order(['species']);
            $concat = $detalle->func()->concat([ 'UPPER(genus)' => 'identifier', ' ' , 'UPPER(species)' => 'identifier' ]);
            $detalle->select(['descripcion' => $concat, 'id']);

            $resultj = json_encode($detalle);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }
    //****************************** FIN MANTENIMIENTO DE CATALOGOS - CARACTERIZACION ********************************//

    public function getPasaporte($instcode='', $accename='')
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;
            $where = array();
            $data = array();
            if ($instcode!='') {
                $where['instcode'] = $instcode;
            }
            if ($accename!='') {
                $where['accename'] = $accename;
            }
            if (count($where)>0) {
                $pasaporte = $this->Pasaporte->find()->where($where)->first();
                if (count($pasaporte)>0) {
                    //$coleccion = $this->Coleccion->find('all') ->where(['id' => $pasaporte->collcode]);
                    $coleccion = $this->Coleccion->get($pasaporte->collcode);
                    //$especie = $this->Especie->find('all') ->where(['id' => $pasaporte->spcode]);
                    $especie = $this->Especie->get($pasaporte->spcode);
                    if (count($coleccion)>0 && count($especie)>0) {
                        //$this->Pasaporte->Modulo->
                        $data['success'] = true;
                        $result['collcode'] = $coleccion->nombre;
                        $result['spcode'] = $especie->nombre_comun;
                        $result['id'] = $pasaporte->id;
                        $data['data'] = $result;
                    }else{
                        $data['success'] = false;
                    }
                } else {
                    $data['success'] = false;
                }
            } else {
                $data['success'] = false;
            }

            $resultj = json_encode($data);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }


/*************************************** INICIO DE VALIDACIONES DE FORMULARIOS - JQUERY VALIDATION ********************************/
    //*************************** VERIFICACION DE EMAIL DEL CLEINTE **********************************//
    public function emailclientverify()
    {
        if ($this->request->is('ajax')) {
            $email = $this->request->data('email');
            $this->autoRender = false;
            $result = $this->Clients->find()->where(['email' => $email])->first();
            echo ($result) ? "false" : "true";
        }
    }

    //******************************** VERIFICACION DE CODIGO FAO **********************************/
    public function codigofaoverify()
    {
        if ($this->request->is('ajax')) {
            $codfao = $this->request->data('codfao');
            $this->autoRender = false;
            $result = $this->Clients->find()->where(['code_fao' => $codfao])->first();
            echo ($result) ? "false" : "true";
        }
    }

    /*********************************** FORMULARIO USER *************************************/
    public function emailverify()
    {
        if ($this->request->is('ajax')) {
            $email = $this->request->data('email');
            $this->autoRender = false;
            $result = $this->User->find()->where(['email' => $email])->first();
            echo ($result) ? "false" : "true";
        }
    }

    /************************************ INICIO FORMULARIO DE PASAPORTE FITO ************************************/
    public function validapassport()
    {
        if ($this->request->is('ajax')) {
            $valor = $this->request->data('valor');
            $this->autoRender = false;
            $result = $this->ConfigTable->find()->where(['resource_id' => $valor, 'table_name' => 'passport', 'status' => 1])->first();

            $resultj = json_encode($result);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function validapassportfito()
    {
        if ($this->request->is('ajax')) {
            $valor = $this->request->data('valor');
            $this->autoRender = false;
            $result = $this->ConfigTable->find()->where(['resource_id' => $valor, 'table_name' => 'passport_fito', 'status' => 1])->first();

            $resultj = json_encode($result);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function validapassportzoo()
    {
        if ($this->request->is('ajax')) {
            $valor = $this->request->data('valor');
            $this->autoRender = false;
            $result = $this->ConfigTable->find()->where(['resource_id' => $valor, 'table_name' => 'passport_zoo', 'status' => 1])->first();

            $resultj = json_encode($result);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    public function validapassportmicro()
    {
        if ($this->request->is('ajax')) {
            $valor = $this->request->data('valor');
            $this->autoRender = false;
            $result = $this->ConfigTable->find()->where(['resource_id' => $valor, 'table_name' => 'passport_micro', 'status' => 1])->first();

            $resultj = json_encode($result);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }
    /************************************ FINALIZACION FORMULARIO DE PASAPORTE FITO ************************************/

    /*************************** VALIDACION DE EXISTENCIA DE DESCRIPTORES ************************/
    public function descriptorverify()
    {
        if ($this->request->is('ajax')) {

            $name     = $this->request->data('name');
            $resource = $this->request->data('resource_id');
            $especie  = $this->request->data('especie_id');

            $this->autoRender = false;

            if($resource == 4){

                $result = $this->Descriptor->find()->where(['name' => $name, 'resource_id' => 3, 'type' => 2, 'specie_id' => $especie, 'status' => 1])->first();

            } else {

                $result = $this->Descriptor->find()->where(['name' => $name, 'resource_id' => $resource, 'type' => 1, 'specie_id' => $especie, 'status' => 1])->first();
            }

            if($result){ $msj = "Nombre de Descriptor ya existe."; } else { $msj = "true"; }

            $resultj = json_encode($msj);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /***************************** VALIDACION DE EXISTENCIA DE DESCRIPTOR DE ESTADO **********************************/
    public function descriptorstateverify()
    {
        if ($this->request->is('ajax')) {

            $label      = $this->request->data('label');
            $descriptor = $this->request->data('descriptor');

            $this->autoRender = false;

            $result = $this->DescriptorState->find()->where(['label' => $label, 'descriptor_id' => $descriptor, 'status' => 1])->first();

            if($result){ $msj = "Nombre de Estado ya existe."; } else { $msj = "true"; }

            $resultj = json_encode($msj);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

    /****************************** VALIDACION DE QUE CODIGO DE ESTADO NO EXISTA **********************************/
    public function descriptorcodeverify()
    {
        if ($this->request->is('ajax')) {

            $code      = $this->request->data('code');
            $descriptor = $this->request->data('descriptor');

            $this->autoRender = false;

            $result = $this->DescriptorState->find()->where(['code' => $code, 'descriptor_id' => $descriptor, 'status' => 1])->first();

            if($result){ $msj = "Estado ya existe para el Descriptor."; } else { $msj = "true"; }

            $resultj = json_encode($msj);
            $this->response->type('json');
            $this->response->body($resultj);
            return $this->response;
        }
    }

/********************************************** FINALIZACION DE VALIDACIONES DE FORMULARIOS ****************************************/

//**************************** INICIO DATATABLES SERVER *************************//
   
   public function datatablepassportfito()
    {
        if ($this->request->is('ajax')) {
            $this->autoRender = false;

            $this->module = $this->Module->find()->where(['controller' => 'PassportFito'])->first();
            if(!empty( $this->module ))
                $permiso = $this->Functions->validarModulo($this->module->id);

            $col = array(
                0  =>  'item',
                1  =>  'a.accenumb',
                2  =>  'a.accname',//
                3  =>  'b.collnumb',//
                4  =>  'a.othenumb',
                5  =>  'f.colname',// colecction
                6  =>  "CONCAT(c.genus,'  ',c.species)",
                7  =>  'c.cropname', //
                8  =>  "DATE_FORMAT(b.acqdate,'%d-%m-%Y')",
                9  =>  'subtype',
                10 =>  'storage',
                11 =>  'd.eea',//station_current_id
                12 =>  'a.instcode',//
                13 =>  'availability',//
                14 =>  'spauthor',//
                15 =>  'subtaxa',
                16 =>  'station_origin_id',
                17 =>  'subtauthor',
            ); //collname

            $conn = ConnectionManager::get('default');
			$sqlEstacionExperimental = " AND a.station_current_id = ".$this->Auth->user('station_id')." ";
			
			// Validar si tiene acceso a Ver todas las estaciones experimentales ***************************************************************************
			
			if( $this->Auth->user('role_id') == 1 ){
				$sqlEstacionExperimental = "";
			}else {
				$sqlAcceso ="SELECT estado FROM permiso_estacion AS p WHERE p.idusuario =".$this->Auth->user('id');
				$stmtAcceso = $conn->prepare($sqlAcceso);
				$stmtAcceso->execute();
				
				if( $stmtAcceso->rowCount() > 0){
					$rowAcceso = $stmtAcceso->fetch();
					if($rowAcceso[0] == 1){ 
						$sqlEstacionExperimental = "";
					}
				}
			}				
			///********************************************************************************************************************************************	
			
            $sql = "SELECT a.accenumb FROM passport AS a WHERE a.resource_id = 1 AND a.status <> 0"; 
            $stmt = $conn->prepare($sql);
            $stmt->execute();

            $totalData = $stmt->rowCount();

            if($totalData > 0){

                $array_filter = [];
                $array_filter_2 = [];
				
                for ($i=0; $i < count($col); $i++) {
                    if(!empty($this->request->data['columns'][$i]['search']['value'])){
						if($i == 9 || $i == 10 || $i == 13){
							$array_filter_2[] = array( 'column' => $col[$i], 'position' => $i ); 
						}else{
							$array_filter[] = array( 'column' => $col[$i], 'position' => $i ); 
						}
                    }
                }
 
				$filtros = "";
                if(count($array_filter) > 0){
                    for ($i=0; $i < count($array_filter); $i++) { 
                        $filtros.=" AND ". $array_filter[$i]['column'] ." LIKE '".$this->request->data['columns'][$array_filter[$i]['position']]['search']['value']."%' ";
                    }
                }	
				
				$filtros2 = "";
                if(count($array_filter_2) > 0){
                    for ($i=0; $i < count($array_filter_2); $i++) { 
                        $filtros2.=" AND ". $array_filter_2[$i]['column'] ." LIKE '".$this->request->data['columns'][$array_filter_2[$i]['position']]['search']['value']."%' ";
                    }
                }			
                
                $sql = "SELECT * FROM (
                            SELECT @rownum := @rownum + 1 AS item, UPPER(a.accenumb) AS accenumb, UPPER(a.instcode) AS instcode,
                                   UPPER(a.othenumb) AS othenumb, UPPER(a.accname) AS accname,
                                   f_datatables_methods(b.subtype) AS subtype, UPPER(b.collnumb) AS collnumb,
                                   (CONCAT(c.genus,'  ',c.species)) AS especie,
                                   UPPER(c.cropname) AS cropname, UPPER(b.spauthor) AS spauthor, UPPER(b.collname) AS collname,
                                   UPPER(b.subtaxa) AS subtaxa, UPPER(b.subtauthor) AS subtauthor, f_datatables_methods(b.storage) AS storage,
                                   DATE_FORMAT(b.acqdate,'%d-%m-%Y') AS acqdate, d.eea AS station_current_id,
                                   e.eea AS station_origin_id, f_datatables_methods(b.availability) AS availability,
                                   b.id AS passport_fito_id, UPPER(f.colname) AS colecction,a.station_current_id AS estacion_permiso
                              FROM passport AS a
                              INNER JOIN passport_fito AS b ON a.id = b.passport_id
                              INNER JOIN specie AS c ON a.specie_id = c.id
                              LEFT JOIN station AS d ON a.station_current_id = d.id
                              LEFT JOIN collection AS f ON f.id = c.collection_id
                              LEFT JOIN station AS e ON a.station_origin_id = e.id, (SELECT @rownum := 0) r
                              WHERE a.resource_id = 1  AND a.status <> 0  ". $sqlEstacionExperimental." ".$filtros.
						"  ) s WHERE 1=1 ".$filtros2;

                if(!empty($this->request->data['search']['value'])){

                    $sql.=" AND (s.item LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.accenumb LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.instcode LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.othenumb LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.accname LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.subtype LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.collnumb LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.especie LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.cropname LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.spauthor LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.collname LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.subtaxa LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.subtauthor LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.storage LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.acqdate LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.station_current_id LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.station_origin_id LIKE '".$this->request->data['search']['value']."%' ";
                    $sql.=" OR s.availability LIKE '".$this->request->data['search']['value']."%' )";
                }
               
			    $stmt = $conn->prepare($sql);
                $stmt->execute();

                $totalFilter = $stmt->rowCount();

				if( $totalFilter > 0){	
			
					$sql.=" ORDER BY ".$col[$this->request->data['order'][0]['column']]." ".$this->request->data['order'][0]['dir']." LIMIT ".
							$this->request->data['start'].", ".$this->request->data['length']." ";

					$query = $conn->prepare($sql);
					$query->execute();

					$data = array();

					while($row = $query->fetch()) {
						$subdata = array();
						$subdata[] = $row[0];
						$subdata[] = $row[1];//COD ACCESION
						$subdata[] = $row[4];//NOMB ACCESION   
						$subdata[] = $row[6];//COD COLEC
						$subdata[] = $row[3];//OTRO COD
						$subdata[] = $row[19];//COLECCION
						$subdata[] = "<i>".$row[7]."</i>";//NOM CIENT
						$subdata[] = $row[8];//NOM COMUN 
						$subdata[] = $row[14];//FECHA 
						$subdata[] = $row[5];//TIP REC
						$subdata[] = $row[13];//TIP CONSER
						$subdata[] = $row[15];//EXPERIMENTAL
						$subdata[] = $row[2];//FAO
						$subdata[] = $row[17];//DISP
						/*$subdata[] = $row[9];
						$subdata[] = $row[10];
						$subdata[] = $row[11];
						$subdata[] = $row[12];                 
						$subdata[] = $row[16];*/
						

						//******************************* VERIFICAMOS LOS PERMISOS A LAS ACCIONES **************************//
						$validar = $permiso['role_id'] == 1 ? true : $permiso['station_id'] == $row[20];

						$botones = "";

						if($permiso['view']) {
							$botones.='<a href="'.$this->request->referer().'/ver/'.$row[18].'" class="btn btn-success btn-xs" data-toggle="tooltip" title="Ver Detalle"><i class="fa fa-search-plus"></i></a>';
						}

						if($permiso['edit'] && $validar ) {
							$botones.=' <a href="'.$this->request->referer().'/editar/'.$row[18].'" class="btn btn-primary btn-xs" data-toggle="tooltip" title="Editar Registro"><i class="fa fa-pencil-square-o"></i></a>';
						}

						if($permiso['delete'] && $validar ) {
							$botones.=' <a href="#" class="btn btn-danger btn-xs delete-btn" data-id="'.$row[18].'" data-toggle="tooltip" title="Eliminar Registro."><i class="fa fa-trash-o"></i></a>';
						}
						
						$subdata[] = '<center>'.$botones.'</center>';
						$data[]    = $subdata;
					}

					$json_data = array(
						"draw"              =>  intval($this->request->data['draw']),
						"recordsTotal"      =>  intval($totalData),
						"recordsFiltered"   =>  intval($totalFilter),
						"data"              =>  $data
					);

					$header_titles = array('ITEM','COD. ACCESIÃN','COD. FAO','OTRO COD. ACCESIÃN','NOMBRE ACCESIÃN','SUBTIPO RECURSO','CÃDIGO DE COLECTA','NOMBRE CIENTÃFICO','NOMBRE COMÃN','AUTORÃA ESPECIE','NOMBRE COLECTOR','SUBTAXONES','AUTORÃA SUBTAXONES','TIPO CONSERVACIÃN','FECHA ADQUISICIÃN','EST. EXPER.','EST. EXPER. PROC.','DISPONIBILIDAD');
					
				} else {

					$data = array();

					$json_data = array(
						"draw"              =>  intval($this->request->data['draw']),
						"recordsTotal"      =>  intval(0),
						"recordsFiltered"   =>  intval(0),
						"data"              =>  $data
					);
				}
            

            } else {

                $data = array();

                $json_data = array(
                    "draw"              =>  intval($this->request->data['draw']),
                    "recordsTotal"      =>  intval(0),
                    "recordsFiltered"   =>  intval(0),
                    "data"              =>  $data
                );
            }

            $data_final = json_encode($json_data);
            $this->response->type('json');
            $this->response->body($data_final);

            return $this->response;
        }
    }
    
 //**************************** FIN DATATABLES SERVER *************************//

}
?>