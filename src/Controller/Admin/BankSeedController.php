<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\loadModel;

use Cake\Datasource\ConnectionManager;
use PDO;

/**
 * BankSeed Controller
 *
 * @property \App\Model\Table\BankSeedTable $BankSeed
 */
class BankSeedController extends AppController
{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = " Gestión Inventario ";
        $this->mod_padre = " Banco Semilla ";
        $this->loadModel('BankSeed');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');
        $this->loadModel('inputSeed');
        $this->loadModel('outputSeed');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {


        if($this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $bankSeed = $this->BankSeed->find()->contain('Passport.Specie.Collection')->leftJoinWith('Passport.Specie.Collection')
                                               ->where(['BankSeed.status !=' => '0'])->order(['BankSeed.lotnumb'=>'DESC'])->all();
                                               /*->order(['BankSeed.lotnumb DESC']);*/


            $mod_padre = $this->mod_parent;
            $titulo    = $this->mod_padre;
            $permiso   = $this->permiso;

            $this->set(compact('bankSeed','styles','scripts','mod_padre', 'titulo','permiso'));
            $this->set('_serialize', ['bankSeed']);

        } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

       }
    }

    /**
     * View method
     *
     * @param string|null $id Bank Seed id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {


        if($this->permiso['view']){

            $bankSeed = $this->BankSeed->find()->where(['BankSeed.status !=' => '0','BankSeed.id '=>$id])->first();
            $passport = $this->Passport->find()->where(['id '=>$bankSeed->passport_id])->first();
            $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

            if($bankSeed ==NULL){
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);

            }

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso= $this->permiso;

            $this->set(compact('bankSeed', 'titulo', 'parent','permiso','validar'));
            $this->set('_serialize', ['bankSeed']);

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
      if($this->permiso['add']){

        $bankSeed = $this->BankSeed->newEntity();
        $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

        $modulo=$this->mod_padre;

        if ($this->request->is('post')) {

            $data = $this->request->getData();
            $data['status'] = '1';
            $data['bank_availability'] = '1';


            try{
                          $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                          $dir_subida = WWW_ROOT.'/gestion_inventario/bank_seed/';

                            $bankSeed = $this->BankSeed->patchEntity($bankSeed, $data);

                            if ($this->BankSeed->save($bankSeed)) {

                                $bankSeed_update = $this->BankSeed->get($bankSeed->id);
                                $bankSeed_update->lotnumb = $bankSeed->id;

                                /********* Imagen 1 *********/
                                 $data['imagen_1']['name'] = $bankSeed->id.'_1.jpg';
                                 $fichero_subido_1 = $dir_subida.basename($data['imagen_1']['name']);
                                 if(move_uploaded_file($data['imagen_1']['tmp_name'], $fichero_subido_1))
                                    $bankSeed_update->accimag1 = 'gestion_inventario/bank_seed/'.$data['imagen_1']['name'];


                                /********* Imagen 2 *********/
                                 $data['imagen_2']['name'] = $bankSeed->id.'_2.jpg';
                                 $fichero_subido_1 = $dir_subida . basename($data['imagen_2']['name']);
                                 if(move_uploaded_file($data['imagen_2']['tmp_name'], $fichero_subido_1))
                                 $bankSeed_update->accimag2 = 'gestion_inventario/bank_seed/'.$data['imagen_2']['name'];

                                if($this->BankSeed->save($bankSeed_update)){

                                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-2)];
                                    $action     = $list_module[(count($list_module)-1)];
                                    $station_id = $bankSeed_update->id;
                                    $recurso_id = '1';

                                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                    $this->Flash->success(__('Se registro un Nuevo Lote satisfactoriamente'));

                                    return $this->redirect(['action' => 'index']);
                                }
                              }

                            $this->Flash->error(__('Hubo inconvenientes al crear el Banco Semilla. Por favor, Otra vez intente.'));

            } catch (\Exception $e) {

                $this->Flash->error(__('Hubo inconvenientes al crear el Banco Semilla. Por favor, Otra vez intente.'));
                return $this->redirect(['action' => 'index']);
            }
        }

                $lista_anio= array();

                for ($i=date("Y"); $i >= 1980; $i--) {
                    $lista_anio[$i]=$i;
                }

                $lista_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_propagacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 354, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

                $lista_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 357, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                $lista_refresacamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 360, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                $lista_material= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 364, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                $lista_almacenamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 369, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                 $lista_vegetativo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 374, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                $titulo = $this->mod_padre;
                $parent = $this->mod_parent;

                $bankSeed->accimag1=(strlen($bankSeed->accimag1)<1) ? "img/noimagen.jpg" :$bankSeed->accimag1;
                $bankSeed->accimag2=(strlen($bankSeed->accimag2)<1) ? "img/noimagen.jpg" :$bankSeed->accimag2;

                $this->set(compact('bankSeed','scripts','titulo','parent','modulo','passport','lista_disponibilidad',
                                   'lista_propagacion','lista_conservacion','lista_refresacamiento','lista_material',
                                   'lista_almacenamiento','lista_vegetativo', 'lista_anio'));
                $this->set('_serialize', ['bankSeed']);

        } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Bank Seed id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        $bankSeed = $this->BankSeed->find()->where(['BankSeed.status !=' => '0','BankSeed.id '=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankSeed!=NULL && $this->permiso['edit'] /*&& $validar*/ ){

             $modulo=$this->mod_padre;
             $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];


            if ($this->request->is(['patch', 'post', 'put'])) {
                $data = $this->request->getData();


                $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));
                $data['realweight'] = $data['p1']+$data['p2']+$data['p3']+$data['p4']+$data['p5'];


                //$data['seeweight']=(empty($data['seeweight']))? '' : number_format( $data['seeweight'],2);
                //$data['germination']=(empty($data['germination']))? '' : number_format( $data['germination'],2);
                //$data['seedhum']=(empty($data['seedhum']))? '' : number_format( $data['seedhum'],2);
                //$data['discweight']=(empty($data['discweight']))? '' : number_format( $data['discweight'],2);
                // $data['p1']=(empty($data['p1']))? '' : number_format( $data['p1'],2);
                // $data['p2']=(empty($data['p2']))? '' : number_format( $data['p2'],2);
                // $data['p3']=(empty($data['p3']))? '' : number_format( $data['p3'],2);
                // $data['p4']=(empty($data['p4']))? '' : number_format( $data['p4'],2);
                // $data['p5']=(empty($data['p5']))? '' : number_format( $data['p5'],2);
                // $data['temp']=(empty($data['temp']))? '' : number_format( $data['temp'],2);
                // $data['realweight'] = $data['p1']+$data['p2']+$data['p3']+$data['p4']+$data['p5'];
                // $data['realweight']=(empty($data['realweight']))? '' : number_format( $data['realweight'],2);

                $dir_subida = WWW_ROOT.'/gestion_inventario/bank_seed/';

                 $data['imagen_1']['name'] = $id.'_1.jpg';
                 $fichero_subido_1 = $dir_subida . basename($data['imagen_1']['name']);
                 if(move_uploaded_file($data['imagen_1']['tmp_name'], $fichero_subido_1))
                            $data['accimag1'] = 'gestion_inventario/bank_seed/'.$data['imagen_1']['name'];

                /********* Imagen 2 *********/
                 $data['imagen_2']['name'] = $id.'_2.jpg';
                 $fichero_subido_1 = $dir_subida . basename($data['imagen_2']['name']);
                 if(move_uploaded_file($data['imagen_2']['tmp_name'], $fichero_subido_1))
                            $data['accimag2'] = 'gestion_inventario/bank_seed/'.$data['imagen_2']['name'];

                try{
                        $bankSeed = $this->BankSeed->patchEntity($bankSeed, $data);
                        if ($this->BankSeed->save($bankSeed)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-3)];
                            $action     = $list_module[(count($list_module)-2)];
                            $station_id = $bankSeed->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                            $this->Flash->success(__('El registro '.$data['pasaporte'].' - Lote '.$bankSeed->lotnumb.' fue actualizado satisfactoriamente '));

                            return $this->redirect(['action' => 'index']);
                        }
                         $this->Flash->error(__('Hubo inconvenientes al actualizar el registro '.$data['pasaporte'].' - Lote '.$bankSeed->lotnumb.'. Por favor, Otra vez intente.'));
                } catch (\Exception $e) {

                            $this->Flash->error(__('Hubo inconvenientes al actualizar el registro '.$data['pasaporte'].' - Lote '.$bankSeed->lotnumb.'. Por favor, Otra vez intente.'));
                            return $this->redirect(['action' => 'index']);
                }
            }

            $lista_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

            $lista_anio= array();

            for ($i=date("Y"); $i >= 1980; $i--) {
                $lista_anio[$i]=$i;
            }


            $lista= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);


            $lista_propagacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 354, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

            $lista_conservacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 357, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

            $lista_refresacamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 360, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

            $lista_material= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 364, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

            $lista_almacenamiento= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 369, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

             $lista_vegetativo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 374, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;

            $passport = $this->BankSeed->Passport->find()->contain('Specie.Collection')->where(['Passport.status' => '1', 'Passport.resource_id' => 1, 'Passport.id' => $bankSeed->passport_id])->first();

            $bankSeed->acqdate = ($bankSeed->acqdate == NULL) ? NULL : date('d-m-Y', strtotime($bankSeed->acqdate));

            $bankSeed->accimag1=(strlen($bankSeed->accimag1)<1) ? "gestion_inventario/bank_seed/noimagen.jpg" :$bankSeed->accimag1;
            $bankSeed->accimag2=(strlen($bankSeed->accimag2)<1) ? "gestion_inventario/bank_seed/noimagen.jpg" :$bankSeed->accimag2;

            $this->set(compact('bankSeed','scripts','modulo','passport','titulo','parent','lista_disponibilidad','lista_propagacion','lista_conservacion','lista_refresacamiento','lista_material','lista_almacenamiento','lista_vegetativo','lista_anio'));

            $this->set('_serialize', ['bankSeed']);

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Bank Seed id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {

        $this->request->is(['post', 'delete']);

        $bankSeed = $this->BankSeed->find()->where(['BankSeed.status !=' => '0','BankSeed.id '=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankSeed!=NULL && $this->permiso['delete'] /*&& $validar*/){

            $bankSeed['modified'] = date('Y-m-d H:i:s');
            $bankSeed['status'] = 0;

            if ($this->BankSeed->save($bankSeed)) {

                $inputSeed = TableRegistry::get("InputSeed");
                $query = $inputSeed->query();
                $query->update()
                      ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                      ->where(['bank_seed_id' => $id])
                      ->execute();

                $outputSeed = TableRegistry::get("OutputSeed");
                $query = $outputSeed->query();
                $query->update()
                      ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                      ->where(['bank_seed_id' => $id])
                      ->execute();

                $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-3)];
                            $action     = $list_module[(count($list_module)-2)];
                            $station_id = $bankSeed->id;
                            $recurso_id = '1';

                $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                $this->Flash->success(__('El registro fue eliminado satisfactoriamente'));

            } else {

                $this->Flash->error(__('Hubo inconvenientes al eliminar el BANCO SEMILLA seleccionado . Por favor, Otra vez intente.'));

            }

            return $this->redirect(['action' => 'index']);

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    // public function exportartabla() {

    //     if ($this->request->is('post')) {

    //         $data = $this->request->getData();

    //         $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

    //         if(file_exists($filePath)){

    //             $this->response->file($filePath , array('download'=> true));

    //             return $this->response;

    //         } else {

    //             $this->Flash->error(__('No existe el archivo.'));
    //             return $this->redirect(['action' => 'index']);
    //         }
    //     }
    // }

    public function exportartabla() {

               
        if ($this->request->is('post')) {
            $data = $this->request->getData();         		
			$conn = ConnectionManager::get('default');          

            ///*********************************
            $sql="SELECT
                    BS.ID AS 'N°',
                    BS.LOTNUMB AS 'LOTE',  
                    PS.ACCENUMB AS 'COD. ACCESIÓN',
                    PS.ACCNAME AS 'NOM. DE ACCESIÓN',
                    PS.OTHENUMB AS 'OTRO CÓDIGO',
                    
                    COL.COLNAME AS 'COLECCION',
                    
                    CONCAT(SP.GENUS,' ',SP.SPECIES,' ',SP.AUTOR) AS 'NOMBRE CIENTÍFICO',
                    SP.CROPNAME AS 'NOM. COMÚN',
                    
                    BS.ORIGIN AS 'LUGAR DE PROCEDENCIA',
                    BS.HARVESTDATE AS 'AÑO DE COSECHA',
                    BS.ACQDATE AS 'FECHA DE INTRODUCCIÓN',
                    BS.RESPONSIBLE AS 'RESPONSABLE',
                    BS.DETECNUMB AS 'CODIGO INTERNO',
                    CASE BS.AVAILABILITY WHEN 331 THEN'SI' WHEN 332 THEN 'NO' END  AS 'LOTE DISPONIBLE',
                    
                    (SELECT NAME FROM  OPTION_LIST WHERE ID=BS.TYPEMAT) AS 'TIPO COLECCIÓN',  
                    (SELECT NAME FROM  OPTION_LIST WHERE ID=BS.SEEDSTO) AS 'TIPO DE SEMILLAS',  
                    (SELECT NAME FROM  OPTION_LIST WHERE ID=BS.SEEDPRO) AS 'REPRODUCCIÓN',  
                    (SELECT NAME FROM  OPTION_LIST WHERE ID=BS.TYPEREF) AS 'REFRESCAMIENTO' ,   
                    
                    BS.GERMINATION AS 'GERMINACIÓN (%)',
                    BS.SEEDHUM AS 'HUMEDAD (%)',
                    BS.VIABILITY AS 'VIABILIDAD (%)',
                    
                    (SELECT NAME FROM  OPTION_LIST WHERE ID=BS.STORAGE) AS 'ALMACENAMIENTO',    
                    BS.SHELVING AS 'UBICACIÓN',
                    BS.TEMP AS 'TEMPERATURA C°',
                    BS.HUMIDITY AS 'HUMEDAD (%)',
                    
                    BS.BAGS AS 'CONTENEDORES',  
                    BS.SEEWEIGHT AS 'PESO 1 (g)',
                    BS.SEEDNUMB AS 'CANTD 1',
                    IF(BS.P1>0,BS.P1,'') AS 'PESO 2 (g)',
                    IF(BS.N1>0,BS.N1,'') AS 'CANTD 2',
                    IF(BS.P2>0,BS.P2,'') AS 'PESO 3 (g)',
                    IF(BS.N2>0,BS.N2,'') AS 'CANTD 3',
                    IF(BS.P3>0,BS.P3,'') AS 'PESO 4 (g)',
                    IF(BS.N3>0,BS.N3,'') AS 'CANTD 4',
                    IF(BS.P4>0,BS.P4,'') AS 'PESO 5 (g)',
                    IF(BS.N4>0,BS.N4,'') AS 'CANTD 5',
                    IF(BS.P5>0,BS.P5,'') AS 'PESO 6 (g)',
                    IF(BS.N5>0,BS.N5,'') AS 'CANTD 6',
                    
                    IF(BS.DISCWEIGHT>0,BS.DISCWEIGHT,'') AS 'PESO (g)',
                    IF(BS.DISCNUMB>0,BS.DISCWEIGHT,'') AS 'CANTD',

                    IF((SELECT COUNT(*) FROM INPUT_SEED WHERE BANK_SEED_ID=BS.ID)>0,(SELECT COUNT(*) FROM INPUT_SEED WHERE BANK_SEED_ID=BS.ID),'') AS 'ENTRADAS',
                    IF((SELECT COUNT(*) FROM OUTPUT_SEED WHERE BANK_SEED_ID=BS.ID)>0,(SELECT COUNT(*) FROM OUTPUT_SEED WHERE BANK_SEED_ID=BS.ID),'') AS 'SALIDAS',
                    
                    BS.SHAPE AS 'FORMA',
                    BS.SIZE AS 'LONGITUD',
                    BS.COLOR AS 'COLOR',
                    BS.PERFORMANCE AS 'RENDIMIENTO',
                    BS.CICLO AS 'CICLO VEGETATIVO',  
                    BS.TIME AS 'TIEMPO VEGETATIVO',
                    BS.RESISTANCE AS 'RESISTENACIA',
                    BS.TOLERANCIA AS 'TOLERANCIA',
                    BS.SUSCEPTIBILITY AS 'SUCEPTIBILIDAD',
                    
                    BS.REMARKS AS 'OBSERVACIÓN'
                    
                    FROM 
                    BANK_SEED BS
                    INNER JOIN
                    PASSPORT PS ON PS.ID = BS.PASSPORT_ID
                    INNER JOIN
                    SPECIE SP ON SP.ID = PS.SPECIE_ID
                    INNER JOIN
                    COLLECTION COL ON COL.ID = SP.COLLECTION_ID

                    WHERE
                    BS.STATUS=1
                    ORDER BY BS.LOTNUMB  DESC
                    
      
                  ";
            $stmtData = $conn->prepare($sql);
			$stmtData->execute();

            if( $stmtData->rowCount() >= 1){

                $libros = $stmtData->fetchAll(PDO::FETCH_ASSOC);
							 
				$filename = "ListaBankSemillas.xlsx"; 

                /************************************ CREACION DEL EXCEL ***********************************/
				$objPHPExcel = new \PHPExcel();
				$objPHPExcel->setActiveSheetIndex(0);
                              
                
				// Creación de las letras del abecedario
				for($i=65; $i<=90; $i++) {
					$letra[] = chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'A'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'B'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'C'.chr($i);
				}

                ############################################# css para los titulos ######################################
				$estiloTitle = array(
                    'font' => array(
                              'name'     => 'Arial Narrow',
                              'bold'     => true,
                              'italic'   => false,
                              'strike'   => false,
                              'size'     => 20,
                              'color' => array(
                                  'rgb' => '000000'
                              )
                      ),
                      /*'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),*/
                      'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                      )
          );

          $estiloSubTitle = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => true,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 13,
                        'color' => array(
                            'rgb' => 'ffffff'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          $estiloCabezera = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => true,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 9,
                        'color' => array(
                            'rgb' => '000000'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          $estiloRegistros = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => false,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 10,
                        'color' => array(
                            'rgb' => '000000'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          ############################################# /css  para los titulos  #########################################
				
				/************** INICIO GENERACION DE LOS TITULOS *****************/
				$header =  array_keys($libros[0]); // array_keys($resultado[0]);
                 
                // Rename sheet
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:AY1");
               
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "BANCO DE SEMILLAS - LISTA DE INVENTARIO ");
     
               //Subtitulos /// 
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:N3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A2", "INFORMACIÓN GENERAL");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("O2:X2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O2", "DATOS DE LA SEMILLA");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("O3:R3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("O3", "Información Generales");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("S3:U3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("S3", "Evaluación de la Semilla");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("V3:X3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("V3", "Medio de Conservación y Ubicación");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("Y2:AM2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Y2", "PESO Y CANTIDAD DE SEMILLA");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("Y3:Y3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Y3", "Total");               
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("Z3:AA3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Z3", "Contenedor 1");            
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AB3:AC3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AB3", "Contenedor 2");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AD3:AE3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AD3", "Contenedor 3");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AF3:AG3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AF3", "Contenedor 4");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AH3:AI3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AH3", "Contenedor 5");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AJ3:AK3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AJ3", "Contenedor 6");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AL3:AM3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AL3", "Descarte");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AN2:AO3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AN2", "ENTREDAS Y SALIDAS DE MATERIAL");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AP2:AX2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AP2", "CARACTERIZACIÓN DE LA SEMILLA");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AP3:AU3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AP3", "Caracterización");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AV3:AX3");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AV3", "Patógenos");
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AY2:AY4");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AY2", "ANOTACIONES/OBSREVACIONES");
  
                                        

                /** ALTURA DE LA FILA */
               $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
               $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(30);
               $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(25);
               $objPHPExcel->getActiveSheet()->getRowDimension('4')->setRowHeight(25);

               /** PARA BLOQUEAR COLUMNAS Y FILAS */
               $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0,5);

               $t = 1;

               for($i=0; $i<count($header); $i++){
                   $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'4', $header[$i]);
                   //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])->setAutoSize(TRUE); 
                   $t++;
               }
    
               $objPHPExcel->getActiveSheet()->getStyle("A1:AY1")->applyFromArray($estiloTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A2:AY3")->applyFromArray($estiloSubTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A4:AY4")->applyFromArray($estiloCabezera);
       

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A2:N3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('2F75B5');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A4:N4')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('D9E1F2');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('O2:X2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('548235');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('O3:X3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('70AD47');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('O4:X4')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('E2EFDA');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('Y2:AM2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('372900');
                
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('Y3:Y3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('806000');
                 $objPHPExcel->getActiveSheet()
                                        ->getStyle('Y4:Y4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('FFF2CC');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('Z3:AA3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('AA6D09');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('Z4:AA4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('F8C878');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AB3:AM3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('806000');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AB4:AM4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('FFF2CC');

                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AN2:AO3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('1F4E78');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AN4:AO4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('DDEBF7');
                
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AP2:AX2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('339966');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AP3:AU3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('57873A');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AV3:AX3')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('44692E');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AP4:AX4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('E2EFDA');
                
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('AY2:AY4')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('404040');

            /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
            $objPHPExcel->getActiveSheet()->setAutoFilter('A4:AX4');

            /************************* ANCHO DE COLUMNAS ***************************/

            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(7);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(8);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(45);
            $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
            $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
            $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
            $objPHPExcel->getActiveSheet()->getColumnDimension('K')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('L')->setWidth(20);
            $objPHPExcel->getActiveSheet()->getColumnDimension('M')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('N')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('O')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('P')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('Q')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('R')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('S')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('T')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('U')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('V')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('W')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('X')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('Y')->setWidth(15);
            $objPHPExcel->getActiveSheet()->getColumnDimension('Z')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AA')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AB')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AC')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AD')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AE')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AF')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AG')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AH')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AI')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AJ')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AK')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AL')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AM')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AN')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AO')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AP')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AQ')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AR')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AS')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AT')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AU')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AV')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AW')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AX')->setWidth(19);
            $objPHPExcel->getActiveSheet()->getColumnDimension('AY')->setWidth(80);

            /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
           
				$celda = 5;
				$cnt=1;     
                for($i=0; $i < count($libros); $i++){

					$content = array_values($libros[$i]);

					for($j = 0; $j<count($content); $j++){
                        $objPHPExcel->getActiveSheet()->getRowDimension($j+5)->setRowHeight(17);
                        $objPHPExcel->getActiveSheet()->getStyle($letra[$j].($celda), $cnt)->applyFromArray($estiloRegistros);

						if($j==0){
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $cnt);
						$cnt++;}
						else{
                            
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), 
                        $content[$j]);}	
                        
                        
					}

					$celda ++;
				}
                /************** FIN   *****************/
				header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
				
				header('Content-Disposition: attachment;filename='.$filename .' ');
				header('Cache-Control: max-age=0');
				$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
				$objWriter->save('php://output');
                exit;            
           }
        
        }

        /************** FIN   *****************/
		$handle = fopen("no_data.txt", "w");
		fwrite($handle, "Consulta sin resultados .....");
		fclose($handle);

		header('Content-Type: application/octet-stream');
		header('Content-Disposition: attachment; filename='.basename('no_data.txt'));
		header('Expires: 0');
		header('Cache-Control: must-revalidate');
		header('Pragma: public');
		header('Content-Length: ' . filesize('no_data.txt'));
		readfile('no_data.txt');
		  
		exit;


    
    }


}


