<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\loadModel;


/**
 * BankField Controller
 *
 * @property \App\Model\Table\BankFieldTable $BankField
 */
class BankFieldController extends AppController
{


     public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Gestión Inventario";
        $this->mod_padre = "Banco Campo";
        $this->loadModel('Ubigeo');
        $this->loadModel('Collection');
        $this->loadModel('Station');
        $this->loadModel('Specie');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');
        $this->loadModel('PassportFito');
        $this->loadModel('InputField');
        $this->loadModel('OutputField');
        $this->loadModel('EvaluationField');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
        $this->permiso=$this->Functions->validarModulo($this->module->id);

    }
    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {

        if($this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $bankField = $this->BankField->find()
                                             ->contain('Passport.Specie.Collection')
                                             ->leftJoinWith('Passport.Specie.Collection')
                                             ->where(['BankField.status !=' => '0']);

            if($bankField ==NULL){
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);

            }

            $mod_padre = $this->mod_parent;
            $titulo = $this->mod_padre;
            $permiso= $this->permiso;

            $this->set(compact('bankField', 'mod_padre','styles','scripts','titulo','permiso'));

            $this->set('_serialize', ['bankField']);

        } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

       }
    }

    /**
     * View method
     *
     * @param string|null $id Bank Field id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {

        if($this->permiso['view']){

            $bankField = $this->BankField->find()->where(['BankField.status' => '1','BankField.id '=>$id])->first();

            if($bankField ==NULL){
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);

            }

            $this->set('bankField', $bankField);
            $this->set('_serialize', ['bankField']);

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso= $this->permiso;

            $this->set(compact('bankField', 'titulo', 'parent','permiso'));
            $this->set('_serialize', ['bankField']);

        } else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {

        if($this->permiso['add']){

                $bankField = $this->BankField->newEntity();
                $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

                $modulo=$this->mod_padre;
                $idcoleccion=-1;
                $idspecie =-1;
                $idPasaporte=null;

                if ($this->request->is('post')) {

                    $data = $this->request->getData();
                    $data['status'] = '1';
                    $data['dpto'] = $data['departamento'];
                    $data['prov'] = $data['provincia'];
                    $data['dist'] = $data['distrito'];
                    $data['bank_availability'] = 1;

                    try{
                            $data['startdate'] = ($data['fecha_inicio'] == '' || $data['fecha_inicio'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_inicio']));


                            $data['enddate'] = ($data['fecha_termino'] == '' || $data['fecha_termino'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_termino']));

                            // $data['latitude']=(empty($data['latitude']))? '' :  b ( $data['latitude'],2);
                            // $data['longitude']=(empty($data['longitude']))? '' : number_format( $data['longitude'],2);
                            // $data['elevation']=(empty($data['elevation']))? '' : number_format( $data['elevation'],2);


                            $total =$this->PassportFito->find()->contain('Passport')
                                                 ->leftJoinWith('Passport')
                                                 ->where(['Passport.status' => '1', 'Passport.resource_id' =>1,'PassportFito.bfield'=>39,'Passport.accenumb'=>$data['pasaporte']])->count();

                            if($total>0){

                                $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                                 ->leftJoinWith('Passport.Specie.Collection')
                                                 ->where(['Passport.status' => '1', 'Passport.resource_id' => 1,'PassportFito.bfield'=>39,'Passport.accenumb'=>$data['pasaporte']])->toarray();

                                if(isset($passport)){

                                     $data['accenumb']=$passport[0]->passport->othenumb;
                                     $data['colname']=$passport[0]->passport->specie->collection->id;
                                     $data['genus']=$passport[0]->passport->specie->genus;
                                     $data['species']=$passport[0]->passport->specie->id;
                                     $idcoleccion=$passport[0]->passport->specie->collection->id;
                                     $lista_species= $this->Specie->find('list', ['keyField' => 'id', 'valueField' => 'species'])->where(['collection_id' => $idcoleccion, 'status' => 1]);
                                    $data['colname']=$passport[0]->passport->specie->collection->id;
                                    $idPasaporte=$passport[0]->passport->id;

                                }
                            }

                             $idspecie= $data['genus'];
                             $idcoleccion= $data['colname'];

                            $bankField = $this->BankField->patchEntity($bankField, $data);

                            $dir_subida = WWW_ROOT.'/gestion_inventario/bank_field/';

                            if ($this->BankField->save($bankField)) {

                                $bankField_update = $this->BankField->get($bankField->id);
                                $bankField_update->expcode= $bankField->id;
                                $bankField_update->plotnumb= $bankField->id;

                                /********* Imagen 1 *********/
                                 $data['imagen_croquis']['name'] = $bankField->id.'_1.jpg';
                                 $fichero_subido_1 = $dir_subida . basename($data['imagen_croquis']['name']);
                                 if(move_uploaded_file($data['imagen_croquis']['tmp_name'], $fichero_subido_1))
                                        $bankField_update->fieldmap= 'gestion_inventario/bank_field/'.$data['imagen_croquis']['name'];

                                /********* Imagen 2 *********/
                                 $data['imagen_campo']['name'] = $bankField->id.'_2.jpg';
                                 $fichero_subido_1 = $dir_subida . basename($data['imagen_campo']['name']);
                                 if(move_uploaded_file($data['imagen_campo']['tmp_name'], $fichero_subido_1))
                                        $bankField_update->image1='gestion_inventario/bank_field/'.$data['imagen_campo']['name'];


                                if ($this->BankField->save($bankField_update)) {

                                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-2)];
                                    $action     = $list_module[(count($list_module)-1)];
                                    $station_id = $bankField_update->id;
                                    $recurso_id = '1';

                                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                    $this->Flash->success(__('El Banco Campo fue creado satisfactoriamente.'));
                                    return $this->redirect(['action' => 'index']);
                                }
                            }
                            $this->Flash->error(__('Hubo inconvenientes al crear el Banco Campo. Por favor, Otra vez intente.'));

                    } catch (\Exception $e) {

                            $this->Flash->error(__('Hubo inconvenientes al crear el Banco Campo. Por favor, Otra vez intente.'. $e->getMessage()));
                            return $this->redirect(['action' => 'index']);
                    }

                }


                $lista_material= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 364, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                $lista_objetivo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 389, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);
                $lista_departamento = $this->Ubigeo->find('list', ['keyField' => 'cod_dep', 'valueField' => 'nombre'])->where(['cod_pro' => 0]);

                $lista_experimiental = $this->Station->find('list', ['keyField' => 'id', 'valueField' => 'eea'])->where(['status' => 1, 'availability' => '1']);

                $lista_coleccion = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])->where(['status' => 1, 'availability' => 1,'resource_id'=>1]);

                $lista_genero= $this->Specie->find('list', ['keyField' => 'genus', 'valueField' => 'genus'])->select(['genus'])->distinct(['genus'])->where(['collection_id' => $idcoleccion, 'status' => 1]);

                $lista_specie= $this->Specie->find('list', ['keyField' => 'id', 'valueField' => 'species'])->select(['species','id'])->where(['genus like ' =>$idspecie , 'status' => 1]);

                $titulo = $this->mod_padre;
                $parent = $this->mod_parent;

                $bankField->fieldmap=($bankField->fieldmap == NULL) ? 'gestion_inventario/bank_field/noimagen.jpg' : $bankField->fieldmap;
                $bankField->image1=($bankField->image1 == NULL) ? 'gestion_inventario/bank_field/noimagen.jpg' : $bankField->image1;

                $this->set(compact('bankField','passport','titulo','idPasaporte','parent','scripts','lista_genero','lista_specie','modulo','lista_material','lista_objetivo','lista_departamento','lista_experimiental','lista_coleccion'));
                $this->set('_serialize', ['bankField']);


        } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

     /**
     * Edit method
     *
     * @param string|null $id Bank Field id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        $bankField = $this->BankField->find()->where(['BankField.status !=' => '0','BankField.id '=>$id])->first();

        if($bankField!=NULL && $this->permiso['edit']){

            $bankField = $this->BankField->get($id, [
                'contain' => []
            ]);

            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

            $modulo=$this->mod_padre ;
            $idcoleccion=$bankField->colname;
            $idspecie=$bankField->genus;

            // $specie = $this->Specie->find()->select(['cropname'])->where(['id'=>$idspecie,'status'=>1])->first();
            // var_dump($specie); exit();
            //$nombre_comun=$specie->cropname;

            $model_passport = $this->Passport->find()->where(['id' => $bankField->passport_id])->first();

            if ($this->request->is(['patch', 'post', 'put'])) {

                $data = $this->request->getData();
                $data['dpto'] = $data['departamento'];
                $data['prov'] = $data['provincia'];
                $data['dist'] = $data['distrito'];

                try{

                        $data['startdate'] = ($data['fecha_inicio'] == '' || $data['fecha_inicio'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_inicio']));

                        $data['enddate'] = ($data['fecha_termino'] == '' || $data['fecha_termino'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_termino']));


                        // $data['latitude']=(empty($data['latitude']))? '' : number_format( $data['latitude'],2);
                        // $data['longitude']=(empty($data['longitude']))? '' : number_format( $data['longitude'],2);
                        // $data['elevation']=(empty($data['elevation']))? '' : number_format( $data['elevation'],2);

                        $total =$this->PassportFito->find()->contain('Passport')
                                             ->leftJoinWith('Passport')
                                             ->where(['Passport.status' => '1', 'Passport.resource_id' =>1,'PassportFito.bfield'=>39,'Passport.accenumb'=>$data['pasaporte']])->count();

                        if($total>0){

                            $passport =$this->PassportFito->find()->contain('Passport.Specie.Collection')
                                             ->leftJoinWith('Passport.Specie.Collection')
                                             ->where(['Passport.status' => '1', 'Passport.resource_id' => 1,'PassportFito.bfield'=>39,'Passport.accenumb'=>$data['pasaporte']])->toarray();

                             if(isset($passport)){

                                 $data['accenumb']=$passport[0]->passport->othenumb;
                                 $data['colname']=$passport[0]->passport->specie->collection->id;
                                 $data['genus']=$passport[0]->passport->specie->genus;
                                 $data['species']=$passport[0]->passport->specie->id;
                                 $idcoleccion=$passport[0]->passport->specie->collection->id;
                                 $lista_species= $this->Specie->find('list', ['keyField' => 'id', 'valueField' => 'species'])->where(['collection_id' => $idcoleccion, 'status' => 1]);
                                $data['colname']=$passport[0]->passport->specie->collection->id;
                                //$data['cropname']=$passport[0]->passport->specie->cropname;

                                $idPasaporte=$passport[0]->passport->id;
                            }
                        }

                        if(!empty($data['species'])){

                            $model_especie = $this->Specie->find()->where(['id' => $data['species']])->first();
                            $data['genus'] = $model_especie->genus;
                        }

                         $idspecie = $data['genus'];
                         $idcoleccion = $data['colname'];
                         // $data['cropname'];
                         $dir_subida = WWW_ROOT.'/gestion_inventario/bank_field/';


                        /********* Imagen 1 *********/
                         $data['imagen_croquis']['name'] = $id.'_1.jpg';
                         $fichero_subido_1 = $dir_subida . basename($data['imagen_croquis']['name']);
                         if(move_uploaded_file($data['imagen_croquis']['tmp_name'], $fichero_subido_1))
                            $data['fieldmap']= 'gestion_inventario/bank_field/'.$data['imagen_croquis']['name'];


                        /********* Imagen 2 *********/
                         $data['imagen_campo']['name'] = $id.'_2.jpg';
                         $fichero_subido_1 = $dir_subida . basename($data['imagen_campo']['name']);
                         if(move_uploaded_file($data['imagen_campo']['tmp_name'], $fichero_subido_1))
                            $data['image1']='gestion_inventario/bank_field/'.$data['imagen_campo']['name'];



                         $bankField = $this->BankField->patchEntity($bankField, $data);

                        if ($this->BankField->save($bankField)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-3)];
                                    $action     = $list_module[(count($list_module)-2)];
                                    $station_id = $bankField->id;
                                    $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('El Banco Campo fue actualizado satisfactoriamente.'));

                            return $this->redirect(['action' => 'index']);
                        }


                        $this->Flash->error(__('Hubo inconvenientes al actualizar al Banco Campo. Por favor, Otra vez intente.'));

                    } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al crear al Banco Campo. Por favor, Otra vez intente.'. $e->getMessage()));
                        return $this->redirect(['action' => 'index']);
                }

            }
            // $lista_genero= $this->Specie->find('list', ['keyField' => 'genus', 'valueField' => 'genus'])->select(['genus'])->distinct(['genus'])->where(['collection_id' => $idcoleccion, 'status' => 1]);

            $lista_genero = $this->Specie->find('list', ['keyField' => 'id',
                                                         'valueField' => function ($row) {
                                                                return mb_strtoupper($row['genus'],'UTF-8') . ' ' . mb_strtoupper($row['species'],'UTF-8');
                                                        }])
                                            ->where(['collection_id' => $idcoleccion, 'status' => 1]);

            $lista_specie = $this->Specie->find()->where(['id' => $bankField->species, 'status' => 1])->first();

            $lista_material= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 364, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

            $lista_objetivo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 389, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);
            $lista_departamento = $this->Ubigeo->find('list', ['keyField' => 'cod_dep', 'valueField' => 'nombre'])->where(['cod_pro' => 0]);

            if($bankField->dpto>=0){
                $lista_provincia = $this->Ubigeo->find('list', ['keyField' => 'cod_pro', 'valueField' => 'nombre'])->where(['cod_dep' => $bankField->dpto,'cod_dis'=>0,'cod_pro >'=>0]);

            if($bankField->prov>=0)
                $lista_distrito = $this->Ubigeo->find('list', ['keyField' => 'id', 'valueField' => 'nombre'])->where(['cod_pro' => $bankField->prov,'cod_dep' => $bankField->dpto,'cod_dis >'=>0]);
            }

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $lista_experimiental = $this->Station->find('list', ['keyField' => 'id', 'valueField' => 'eea'])->where(['status' => 1, 'availability' => '1']);

            $lista_coleccion = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])->where(['status' => 1, 'availability' => 1,'resource_id'=>1]);

            $bankField->startdate = ($bankField->startdate == NULL) ? NULL : date('d-m-Y', strtotime($bankField->startdate));
            $bankField->enddate   = ($bankField->enddate == NULL) ? NULL : date('d-m-Y', strtotime($bankField->enddate));
            $bankField->fieldmap  = ($bankField->fieldmap == NULL) ? 'gestion_inventario/bank_field/noimagen.jpg' :$bankField->fieldmap;
            $bankField->image1    = ($bankField->image1 == NULL) ? 'gestion_inventario/bank_field/noimagen.jpg' : $bankField->image1;



            $this->set(compact('bankField','lista_genero','lista_specie', 'idPasaporte','passport','titulo','parent','scripts','modulo',
                               'lista_material','lista_objetivo','lista_departamento','lista_experimiental','lista_coleccion',
                               'lista_provincia','lista_distrito', 'model_passport'));
            $this->set('_serialize', ['bankField']);

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Bank Field id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->is(['post', 'delete']);

        $bankField = $this->BankField->find()->where(['BankField.status !=' => '0','BankField.id '=>$id])->first();

        if($bankField!=NULL && $this->permiso['delete']){

            $bankField = $this->BankField->get($id);
            $bankField['modified'] = date('Y-m-d H:i:s');
            $bankField['status'] = 0;

                if ($this->BankField->save($bankField)) {

                    $inputField = TableRegistry::get("InputField");
                    $query = $inputField->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_field_id' => $id])
                          ->execute();

                    $outputField = TableRegistry::get("OutputField");
                    $query = $outputField->query();
                    $query->update()
                          ->set(['modified  ' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_field_id' => $id])
                          ->execute();

                    $evaluationField = TableRegistry::get("EvaluationField");
                    $query = $evaluationField->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_field_id' => $id])
                          ->execute();

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-3)];
                    $action     = $list_module[(count($list_module)-2)];
                    $station_id = $bankField->id;
                    $recurso_id = '1';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('El Banco Campo fue Eliminado satisfactoriamente.'));

                }else {

                    $this->Flash->error(__('Hubo inconvenientes al Eliminar el Banco Campo. Por favor, Otra vez intente.'. $e->getMessage()));
                }

                return $this->redirect(['action' => 'index']);

        }   else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);

        }
    }

    public function exportartabla() {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }


}


