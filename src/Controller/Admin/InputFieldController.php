<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;

/**
 * InputField Controller
 *
 * @property \App\Model\Table\InputFieldTable $InputField
 */
class InputFieldController extends AppController
{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Banco Campo ";
        $this->mod_padre = "Entrada de Material";
        $this->loadModel('BankField');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'BankField'])->first();
        if(!empty( $this->module ))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index($id=null)
    {
        $bankField_count = $this->BankField->find()->where(['BankField.status '=>'1','BankField.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankField_count->passport_id])->first();

        if($bankField_count !=NULL && $this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $inputField = $this->InputField->find()->where(['InputField.status !=' => '0', 'bank_field_id' => $id]);

            $titulo=$this->mod_parent.' - '. $this->mod_padre;
            $titulo_lista=$this->mod_padre;
            $permiso=$this->permiso;

            $this->set(compact('inputField','titulo','styles','scripts','titulo_lista','id','permiso','passport'));
            $this->set('_serialize', ['inputField']);

        }else{

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect(['action' => 'index','controller'=>'BankField']);

        }
    }

    /**
     * View method
     *
     * @param string|null $id Input Field id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null,$child=null)
    {
        $bankField_count = $this->BankField->find()->where(['BankField.status '=>'1','BankField.id'=>$id])->count();

        if($bankField_count ==0 || !$this->permiso['view']){

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'BankField']);

        } else {

            $inputField = $this->InputField->find()->where(['InputField.status !=' => '0','InputField.id'=>$child,'InputField.bank_field_id'=>$id])->first();

            if($inputField==NULL){

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$id]);
            }

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso=$this->permiso;

            $this->set(compact('inputField','titulo','permiso','id','child'));
            $this->set('_serialize', ['inputField']);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id=null)
    {

        $bankField_count = $this->BankField->find()->where(['BankField.status '=>'1','BankField.id'=>$id])->count();

        if($bankField_count>0 && $this->permiso['add']){

            $modulo= $this->mod_padre ;
            $inputField = $this->InputField->newEntity();
            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

            $inputField->bank_field_id=$id;

            if ($this->request->is('post')) {
                $data=$this->request->getData();
                $data['status']=1;
                 try{
                        $data['bank_field_id']= $id;
                        $data['enterdate'] = ($data['fecha_entrada'] == '' || $data['fecha_entrada'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_entrada']));

                        $inputField = $this->InputField->patchEntity($inputField,$data);
                        if ($this->InputField->save($inputField)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-4)];
                            $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                            $station_id = $inputField->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('La Entrada de Material fue creado satisfactoriamente.'));

                            return $this->redirect(['action' => 'index',$inputField->bank_field_id]);
                        }
                        $this->Flash->error(__('Hubo inconvenientes al crear la Entrada de Material. Por favor, Otra vez intente.'));
                } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al crear la Entrada de Material. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
                }
            }

            $lista_muestra= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 383, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);



            $this->set(compact('inputField','modulo','scripts','id','lista_muestra'));
            $this->set('_serialize', ['inputField']);

        }else {

                 $this->Flash->error(__('Operación denegada.'));
                 return $this->redirect(['action' => 'index','controller'=>'BankField']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Input Field id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null, $child = null)
    {
            $bankField_count = $this->BankField->find()->where(['BankField.status '=>'1','BankField.id'=>$id])->first();
            //$passport = $this->Passport->find()->where(['id '=>$bankField_count->passport_id])->first();

            if($bankField_count!=NULL && $this->permiso['edit']){

                     $inputField = $this->InputField->find()
                                                 ->where(['InputField.status !=' => '0','InputField.id'=>$child,'InputField.bank_field_id'=>$id
                                                    ])->first();

                    if($inputField==NULL){

                                $this->Flash->error(__('Operación denegada.'));
                                return $this->redirect(['action' => 'index',$id]);
                    } else {

                            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

                            $modulo=$this->mod_padre ;


                            if ($this->request->is(['patch', 'post', 'put'])) {
                                $data=$this->request->getData();
                                 try{
                                        $data['enterdate'] = ($data['fecha_entrada'] == '' || $data['fecha_entrada'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_entrada']));
                                        $inputField = $this->InputField->patchEntity($inputField,$data);

                                        if ($this->InputField->save($inputField)) {

                                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                                            $user_id    = $this->Auth->User('id');
                                            $module     = $list_module[(count($list_module)-5)];
                                            $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                                            $station_id = $inputField->id;
                                            $recurso_id = '1';

                                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                            $this->Flash->success(__('La Entrada de Material fue actualizado satisfactoriamente.'));

                                            return $this->redirect(['action' => 'index',$inputField->bank_field_id]);
                                        }
                                        $this->Flash->error(__('Hubo inconvenientes al actualizar la Entrada de Material. Por favor, Otra vez intente.'));

                                    } catch (\Exception $e) {

                                        $this->Flash->error(__('Hubo inconvenientes al actualizar la Entrada de Material. Por favor, Otra vez intente.'));
                                        return $this->redirect(['action' => 'index']);
                                }
                            }

                            $lista_muestra= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 383, 'status' => 1, 'OR' => [['resource_id' => 1]] ]);

                             $inputField->enterdate=($inputField->enterdate == NULL) ? NULL : date('d-m-Y', strtotime($inputField->enterdate));
                            $this->set(compact('inputField','scripts','modulo','lista_muestra','id','child'));
                            $this->set('_serialize', ['inputField']);

                    }
                }
                 else {

                     $this->Flash->error(__('Operación denegada.'));
                     return $this->redirect(['action' => 'index','controller'=>'BankField']);

            }

    }

    /**
     * Delete method
     *
     * @param string|null $id Input Field id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null,$child=null)
    {
        $bankField_count = $this->BankField->find()->where(['BankField.status '=>'1','BankField.id'=>$id])->first();
        //$passport = $this->Passport->find()->where(['id '=>$bankField_count->passport_id])->first();

            if($bankField_count!=NULL && $this->permiso['delete']){

               $this->request->is(['post', 'delete']);

                $inputField = $this->InputField->find()
                                         ->where(['InputField.status !=' => '0','InputField.id'=>$child,'InputField.bank_field_id'=>$id
                                            ])->first();

                if($inputField==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$id]);

                } else {

                        $inputField['status'] = 0;

                        if ($this->InputField->save($inputField)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-5)];
                            $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                            $station_id = $inputField->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                            $this->Flash->success(__('La Entrada del Material fue eliminado satisfactoriamente.'));
                        } else {
                             $this->Flash->error(__('Hubo inconvenientes al eliminar la Entrada Material . Por favor, Otra vez intente.'));
                        }

                       return $this->redirect(['action' => 'index', $inputField->bank_field_id]);

                    }

            }  else {

                     $this->Flash->error(__('Operación denegada.'));
                     return $this->redirect(['action' => 'index','controller'=>'BankField']);
            }
    }

    public function exportartabla($id=null) {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }

}
