<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\loadModel;

/**
 * BankMicro Controller
 *
 * @property \App\Model\Table\BankMicroTable $BankMicro
 *
 * @method \App\Model\Entity\BankMicro[] paginate($object = null, array $settings = [])
 */
class BankMicroController extends AppController
{



       public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Gestión Inventario";
        $this->mod_padre = "Banco Microorganismo";
        $this->loadModel('Collection');
        $this->loadModel('Specie');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
         if($this->permiso['index']){

          $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
          $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                      'assets/js/datatable/dataTables.bootstrap.min',
                      'assets/js/datatable/dataTables.select.min'];

          $bankMicro = $this->BankMicro->find()
                                           ->contain('Passport.Specie.Collection')
                                           ->leftJoinWith('Passport.Specie.Collection')
                                           ->where(['BankMicro.status !=' => '0']);

          $titulo = $this->mod_parent ." - ".$this->mod_padre;
          $titulo_lista =$this->mod_padre;
          $permiso= $this->permiso;

          $this->set(compact('bankMicro', 'titulo','styles','scripts','titulo_lista','permiso'));

          $this->set('_serialize', ['bankMicro']);

         } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

        }
    }

    /**
     * View method
     *
     * @param string|null $id Bank Micro id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        if($this->permiso['view']){

          $bankMicro = $this->BankMicro->find()->contain('Passport.Specie.Collection')
                                               ->leftJoinWith('Passport.Specie.Collection')
                                               ->where(['BankMicro.status !=' => '0','BankMicro.id '=>$id])->first();


         $passport = $this->Passport->find()->where(['id'=>$bankMicro->passport_id])->first();

         $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

          if ($bankMicro==NULL) {
              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect(['action' => 'index']);
          }

          $titulo = $this->mod_padre;
          $parent = $this->mod_parent;
          $permiso= $this->permiso;

          $this->set(compact('bankMicro', 'titulo', 'parent','permiso','validar'));
          $this->set('_serialize', ['bankMicro']);

         } else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
          }

    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        if($this->permiso['add']){

            $bankMicro = $this->BankMicro->newEntity();
            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

            $modulo=$this->mod_padre;

            if ($this->request->is('post')) {

                $data = $this->request->getData();
                $data['status'] = '1';
                $data['bank_availability'] = '1';

                $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                $data['reacdate'] = ($data['fecha_reactivacion'] == '' || $data['fecha_reactivacion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_reactivacion']));


                try{

                    $bankMicro = $this->BankMicro->patchEntity($bankMicro, $data);

                    if ($this->BankMicro->save($bankMicro)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-2)];
                        $action     = $list_module[(count($list_module)-1)];
                        $station_id = $bankMicro->id;
                        $recurso_id = '3';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $bankMicro_update = $this->BankMicro->get($bankMicro->id);
                        $bankMicro_update->lotnumb = $bankMicro->id;
                        $this->BankMicro->save($bankMicro_update);

                        $this->Flash->success(__('El Banco Microorganismo fue creado satisfactoriamente.'));
                        return $this->redirect(['action' => 'index']);
                    }
                    $this->Flash->error(__('Hubo inconvenientes al crear el Banco Microorganismo. Por favor, Otra vez intente.'));

                } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al crear el Banco Microorganismo. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
                }
            }

            $lista_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

            $lista_riesgo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 237, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

            $lista_nivel= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 535, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

            $lista_reactivacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 498, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

            $this->set(compact('bankMicro','modulo','scripts','lista_disponibilidad','lista_disponibilidad','lista_riesgo','lista_nivel','lista_reactivacion'));

            $this->set('_serialize', ['bankMicro']);

         } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Bank Micro id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

      $bankMicro = $this->BankMicro->find()->where(['BankMicro.status !=' => '0','BankMicro.id '=>$id])->first();
      $passport = $this->Passport->find()->where(['id'=>$bankMicro->passport_id])->first();

      $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

      if($this->permiso['edit'] /*&& $validar*/ ){



        if($bankMicro!=NULL){

         $modulo=$this->mod_padre;
         $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

         $passport = $this->BankMicro->Passport->find()->contain('Specie.Collection')->where(['Passport.status' => '1', 'Passport.resource_id' => 3, 'Passport.id' => $bankMicro->passport_id])->first();

        if ($this->request->is(['patch', 'post', 'put'])) {

            $data = $this->request->getData();

            $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

            $data['reacdate'] = ($data['fecha_reactivacion'] == '' || $data['fecha_reactivacion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_reactivacion']));

            try{

                $bankMicro = $this->BankMicro->patchEntity($bankMicro, $data);

                if ($this->BankMicro->save($bankMicro)) {

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-2)];
                    $action     = $list_module[(count($list_module)-1)];
                    $station_id = $bankMicro->id;
                    $recurso_id = '3';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('El Banco Microorganismo fue actualizado satisfactoriamente.'));

                    return $this->redirect(['action' => 'index']);
                }
                $this->Flash->error(__('Hubo inconvenientes al actualizar el Banco Microorganismo. Por favor, Otra vez intente.'));
            } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al actualizar el Banco Microorganismo. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
               }
        }

        $lista_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

        $lista_riesgo= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 237, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_nivel= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 535, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_reactivacion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 498, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);


        $titulo = $this->mod_padre;
        $parent = $this->mod_parent;

        $bankMicro->acqdate = ($bankMicro->acqdate == NULL) ? NULL : date('d-m-Y', strtotime($bankMicro->acqdate));
        $bankMicro->reacdate = ($bankMicro->reacdate == NULL) ? NULL : date('d-m-Y', strtotime($bankMicro->reacdate));

        //$this->set(compact('scripts','bankMicro','titulo','parent','passport','modulo','scripts','tipo_disponibilidad'));
        $this->set(compact('passport','bankMicro','modulo','scripts','titulo','parent','lista_disponibilidad','lista_disponibilidad','lista_riesgo','lista_nivel','lista_reactivacion'));

        $this->set('_serialize', ['bankMicro']);

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }

      } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);
      }
    }

    /**
     * Delete method
     *
     * @param string|null $id Bank Micro id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {

         $bankMicro = $this->BankMicro->find()->where(['BankMicro.status !=' => '0','BankMicro.id '=>$id])->first();
         $passport = $this->Passport->find()->where(['id'=>$bankMicro->passport_id])->first();
         $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

         if($this->permiso['delete'] /*&& $validar*/ ){

            $this->request->is(['post', 'delete']);

            if($bankMicro!=NULL){

                $bankMicro['modified'] = date('Y-m-d H:i:s');
                $bankMicro['status'] = 0;

                if ($this->BankMicro->save($bankMicro)) {

                    $inputMicro = TableRegistry::get("InputMicro");
                    $query = $inputMicro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_micro_id' => $id])
                          ->execute();

                    $outputMicro = TableRegistry::get("OutputMicro");
                    $query = $outputMicro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_micro_id' => $id])
                          ->execute();


                    $longTermConservationMicro = TableRegistry::get("LongTermConservationMicro");
                    $query = $longTermConservationMicro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_micro_id' => $id])
                          ->execute();


                    $shortTermConservationMicro = TableRegistry::get("ShortTermConservationMicro");
                    $query = $shortTermConservationMicro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_micro_id' => $id])
                          ->execute();

                    $shortTermConservationMicro = TableRegistry::get("PurityMicro");
                    $query = $shortTermConservationMicro->query();
                    $query->update()
                          ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                          ->where(['bank_micro_id' => $id])
                          ->execute();

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-2)];
                    $action     = $list_module[(count($list_module)-1)];
                    $station_id = $bankMicro->id;
                    $recurso_id = '3';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('El Banco Microorganismo fue eliminado satisfactoriamente.'));

                }else {

                    $this->Flash->error(__('Hubo inconvenientes al eliminar el BANCO MICROORGANISMO seleccionado. Por favor, Otra vez intente.'));
                }

                return $this->redirect(['action' => 'index']);
            }else{

                 $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);
            }

      } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);
      }
    }

    public function exportartabla() {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }


}
