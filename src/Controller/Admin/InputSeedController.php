<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\loadModel;
/**
 * InputSeed Controller
 *
 * @property \App\Model\Table\InputSeedTable $InputSeed
 */
class InputSeedController extends AppController
{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Banco Semilla ";
        $this->mod_padre = "Entrada de Material";
        $this->loadModel('BankSeed');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' =>'BankSeed'])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index($id =null)
    {

        $bankSeed_count = $this->BankSeed->find()->where(['BankSeed.status '=>'1','BankSeed.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed_count->passport_id])->first();

        if($bankSeed_count!=null && $this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $inputSeed = $this->InputSeed->find()->where(['InputSeed.status !=' => '0', 'bank_seed_id' => $id]);


            $titulo=$this->mod_parent.' - '. $this->mod_padre;
            $titulo_lista=$this->mod_padre;
            $permiso= $this->permiso;

            $this->set(compact('inputSeed','titulo','styles','scripts','titulo_lista','id','permiso','passport'));
            $this->set('_serialize', ['inputSeed']);

        }else{

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect(['action' => 'index','controller'=>'BankSeed']);

        }
    }

    /**
     * View method
     *
     * @param string|null $id Input Seed id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null, $child = null)

    {

        $bankSeed_count = $this->BankSeed->find()->where(['BankSeed.status '=>'1','BankSeed.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankSeed_count ==NULL || !$this->permiso['view']){

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'BankSeed']);

        }else{

            $inputSeed = $this->InputSeed->find()->where(['InputSeed.status !=' => '0','InputSeed.id'=>$child,'InputSeed.bank_seed_id'=>$id])->first();

            if($inputSeed==NULL){

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$id]);
            }

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso= $this->permiso;

            $this->set(compact('inputSeed','titulo','permiso','id','child','validar'));
            $this->set('_serialize', ['inputSeed']);
        }

    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id= null)
    {
        $bankSeed_count = $this->BankSeed->find()->where(['BankSeed.status '=>'1','BankSeed.id'=>$id])->count();

        if($bankSeed_count>0 && $this->permiso['add']){

            $modulo= $this->mod_padre ;
            $inputSeed = $this->InputSeed->newEntity();
            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];
            $inputSeed->bank_seed_id = $id;

            if ($this->request->is('post')) {
                $data=$this->request->getData();
                $data['status']=1;
                 try{
                        $data['bank_seed_id']= $id;
                        $data['enterdate'] = ($data['fecha_entrada'] == '' || $data['fecha_entrada'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_entrada']));

                        // $data['weightent']=(empty($data['weightent']))? '' : number_format( $data['weightent'],2);

                        $inputSeed = $this->InputSeed->patchEntity($inputSeed,$data);
                        if ($this->InputSeed->save($inputSeed)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-4)];
                            $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                            $station_id = $inputSeed->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('La Entrada de Material fue creado satisfactoriamente.'));

                            return $this->redirect(['action' => 'index',$inputSeed->bank_seed_id]);
                        }
                        $this->Flash->error(__('Hubo inconvenientes al crear la Entrada de Material. Por favor, Otra vez intente.'));
                    } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al crear la Entrada de Material. Por favor, Otra vez intente.'));

                        return $this->redirect(['action' => 'index',$inputSeed->bank_seed_id]);
                    }
            }
            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;

            $this->set(compact('inputSeed', 'bankSeed','titulo', 'parent','modulo','id','scripts'));
            $this->set('_serialize', ['inputSeed']);

        }else {

                 $this->Flash->error(__('Operación denegada.'));
                 return $this->redirect(['action' => 'index','controller'=>'BankSeed']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Input Seed id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null, $child = null)
    {

        $bankSeed_count = $this->BankSeed->find()->where(['BankSeed.status '=>'1','BankSeed.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankSeed_count!=null &&  $this->permiso['edit'] /*&& $validar*/ ){

            $inputSeed = $this->InputSeed->find()
                                         ->where(['InputSeed.status !=' => '0','InputSeed.id'=>$child,'InputSeed.bank_seed_id'=>$id
                                            ])->first();

            if($inputSeed==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$id]);
            } else {

                    $modulo=$this->mod_padre ;
                    $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];
                    if ($this->request->is(['patch', 'post', 'put'])) {

                        $data=$this->request->getData();

                         try{
                                $data['enterdate'] = ($data['fecha_entrada'] == '' || $data['fecha_entrada'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_entrada']));


                                // $data['weightent']=(empty($data['weightent']))? '' : number_format( $data['weightent'],2);

                                $inputSeed = $this->InputSeed->patchEntity($inputSeed,$data);

                                if ($this->InputSeed->save($inputSeed)) {

                                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-5)];
                                    $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                                    $station_id = $inputSeed->id;
                                    $recurso_id = '1';

                                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                    $this->Flash->success(__('La Entrada de Material fue actualizado satisfactoriamente.'));

                                    return $this->redirect(['action' => 'index',$inputSeed->bank_seed_id]);
                                }
                                $this->Flash->error(__('Hubo inconvenientes al actualizar la Entrada de Material. Por favor, Otra vez intente.'));

                         } catch (\Exception $e) {

                                $this->Flash->error(__('Hubo inconvenientes al actualizar la Entrada de Material. Por favor, Otra vez intente.'));
                                return $this->redirect(['action' => 'index',$inputSeed->bank_seed_id]);
                        }
                    }

                     $inputSeed->enterdate=($inputSeed->enterdate == NULL) ? NULL : date('d-m-Y', strtotime($inputSeed->enterdate));

                    $this->set(compact('inputSeed','modulo','scripts','id','child'));
                    $this->set('_serialize', ['inputSeed']);
            }

        } else {

                 $this->Flash->error(__('Operación denegada.'));
                 return $this->redirect(['action' => 'index','controller'=>'BankSeed']);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Input Seed id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null, $child = null)
    {
        $bankSeed_count = $this->BankSeed->find()->where(['BankSeed.status '=>'1','BankSeed.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankSeed_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankSeed_count!=null && $this->permiso['delete'] /*&& $validar*/){

            $this->request->is(['post', 'delete']);

            $inputSeed = $this->InputSeed->find()
                                         ->where(['InputSeed.status !=' => '0','InputSeed.id'=>$child,'InputSeed.bank_seed_id'=>$id
                                            ])->first();

            if($inputSeed==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$id]);

            } else {

                    $inputSeed['status'] = 0;
                    if ($this->InputSeed->save($inputSeed)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-5)];
                        $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                        $station_id = $inputSeed->id;
                        $recurso_id = '1';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('La Entrada del Material fue eliminado satisfactoriamente'));
                    } else {
                         $this->Flash->error(__('Hubo inconvenientes al eliminar la Entrada del Material . Por favor, Otra vez intente.'));
                    }

                   return $this->redirect(['action' => 'index', $inputSeed->bank_seed_id]);
                }

        }else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'BankSeed']);
        }
    }

    public function exportartabla($id=null) {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }


}
