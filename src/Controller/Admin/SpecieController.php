<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;

use Cake\Datasource\ConnectionManager;
use PDO;

/**
 * Specie Controller
 *
 * @property \App\Model\Table\SpecieTable $Specie
 */
class SpecieController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->loadModel('Resource');
        $this->loadModel('Collection');
        $this->mod_parent = "Administración base de datos";
        $this->mod_padre = "Especie";
        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso = $this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        // $this->paginate = [
        //     'contain' => ['Collection']
        // ];
        if($this->permiso['index']){

                $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
                $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                            'assets/js/datatable/dataTables.bootstrap.min',
                            'assets/js/datatable/dataTables.select.min'];

                $modulo = $this->mod_parent;
                $titulo = $this->mod_padre;
                $permiso= $this->permiso;

                $specie = $this->Specie->find('all')->contain('Collection')->where(['Specie.status !=' => '0']);

                $this->set(compact('specie', 'modulo', 'titulo','styles','scripts','permiso'));
                $this->set('_serialize', ['specie']);

        } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

       }
    }

    /**
     * View method
     *
     * @param string|null $id Specie id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {

        if($this->permiso['view']){

        $specie_count = $this->Specie->find()->where(['Specie.status !=' => '0','Specie.id '=>$id])->count();

            if ($specie_count>0) {

                $specie = $this->Specie->get($id, [
                'contain' => ['Collection', 'Descriptor', 'Passport']
                ]);

                $modulo = $this->mod_parent;
                $titulo = $this->mod_padre;
                $permiso= $this->permiso;

                $this->set(compact('specie', 'modulo', 'titulo','permiso'));
                $this->set('_serialize', ['specie']);


            }else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);
            }

        } else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }


    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {

        if($this->permiso['add']){

                $specie = $this->Specie->newEntity();

                if ($this->request->is('post')) {

                    try {

                        $data = $this->request->getData();
                        $data['status'] = '1';

                        $specie = $this->Specie->patchEntity($specie, $data);

                        if ($this->Specie->save($specie)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-2)];
                            $action     = $list_module[(count($list_module)-1)];
                            $station_id = $specie->id;
                            $recurso_id = '4';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('Especie creado satisfactoriamente.'));

                            return $this->redirect(['action' => 'index']);
                        }

                        $this->Flash->error(__('Hubo inconvenientes al crear la eSpecie. Por favor, Otra vez intente.'));

                    } catch (\Exception $e) {

                        $this->Flash->error(__('Complete los campos requeridos. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
                    }
                }

                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $recursos = $this->Resource->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['id !=' => '4']);

                $modulo = $this->mod_parent;
                $titulo = $this->mod_padre;

                $this->set(compact('specie', 'recursos', 'modulo', 'titulo', 'scripts'));
                $this->set('_serialize', ['specie']);

        } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Specie id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {

        if($this->permiso['edit']){

                $specie_count = $this->Specie->find()->where(['Specie.status !=' => '0','Specie.id '=>$id])->count();

                if($specie_count==0){

                                $this->Flash->error(__('Operación denegada.'));
                                return $this->redirect(['action' => 'index']);
                }else{

                $specie = $this->Specie->get($id, [
                            'contain' => []
                        ]);

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $specie = $this->Specie->patchEntity($specie, $this->request->getData());

                    if ($this->Specie->save($specie)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-3)];
                        $action     = $list_module[(count($list_module)-2)];
                        $station_id = $specie->id;
                        $recurso_id = '4';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('Especie actualizada satisfactoriamente.'));

                        return $this->redirect(['action' => 'index']);
                    }

                    $this->Flash->error(__('Hubo inconvenientes al actualizar la eSpecie. Por favor, Otra vez intente.'));
                }

                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $modulo = $this->mod_parent;
                $titulo = $this->mod_padre;

                $id_coleccion = $this->Collection->find()->where(['id' => $specie->collection_id])->first();

                $collection = $this->Specie->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                   ->where(['resource_id' => $id_coleccion->resource_id, 'Collection.status !=' => 0,'colname !='=>''])->order(['colname' => 'ASC']);

                $recursos = $this->Resource->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['id !=' => '4']);

                $this->set(compact('specie', 'collection', 'modulo', 'titulo', 'scripts', 'recursos', 'id_coleccion'));
                $this->set('_serialize', ['specie']);

                }

        } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);

        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Specie id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {

        if($this->permiso['delete']){

                $specie_count = $this->Specie->find()->where(['Specie.status '=>'1','Specie.id'=>$id])->count();

                if($specie_count>0){

                    $this->request->is(['post', 'delete']);

                    $specie = $this->Specie->find()->where(['Specie.status !=' => '0','Specie.id'=>$id])->first();

                    if($specie==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$id]);

                    }else{
                    //$specie = $this->Specie->get($id);
                    $specie['status'] = 0;

                        if ($this->Specie->save($specie)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-3)];
                            $action     = $list_module[(count($list_module)-2)];
                            $station_id = $specie->id;
                            $recurso_id = '4';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('Especie eliminada satisfactoriamente.'));

                        } else {

                            $this->Flash->error(__('Hubo inconvenientes al eliminar la Especie. Por favor, Otra vez intente.'));
                        }

                        return $this->redirect(['action' => 'index']);
                    }

                }else{

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index']);

                }

        } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);

        }
    }

    // public function exportartabla() {

    //     if ($this->request->is('post')) {

    //         $data = $this->request->getData();

    //         $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

    //         if(file_exists($filePath)){

    //             $this->response->file($filePath , array('download'=> true));

    //             return $this->response;

    //         } else {

    //             $this->Flash->error(__('No existe el archivo.'));
    //             return $this->redirect(['action' => 'index']);
    //         }
    //     }
    // }
    public function exportartabla() {
       
        if ($this->request->is('post')) {
            $data = $this->request->getData();         		
			$conn = ConnectionManager::get('default');          

            ///*********************************
            $sql="SELECT
                    SP.ID AS 'N',
                    RES.DESCRIPTION AS 'TIPO DE RECURSO',
                    COL.COLNAME AS 'COLECCION',
                    CONCAT(SP.GENUS,' ',SP.SPECIES,' ',SP.AUTOR) AS 'NOMBRE CIENTÍFICO',
                    SP.FAMILY AS 'FAMILIA',
                    SP.GENUS AS 'GENERO',
                    SP.SPECIES AS 'ESPECIE',
                    SP.CROPNAME AS 'NOM. COMÚN',                    
                    SP.AUTOR AS 'AUTORIA DE LA ESPECIE',                     
                    CASE SP.AVAILABILITY WHEN 1 THEN'SI' WHEN 2 THEN 'NO' END  AS 'DISPONIBLIDAD'
                    FROM (
                    SPECIE SP
                    JOIN
                    COLLECTION COL ON COL.ID = SP.COLLECTION_ID
                    JOIN
                    RESOURCE RES ON RES.ID = COL.RESOURCE_ID
                    )
                    WHERE SP.STATUS=1
                    ORDER BY 'N' DESC
            
                  ";
            $stmtData = $conn->prepare($sql);
			$stmtData->execute();

            if( $stmtData->rowCount() >= 1){

                $libros = $stmtData->fetchAll(PDO::FETCH_ASSOC);
							 
				$filename = "ListadeEspecies.xlsx"; 

                /************************************ CREACION DEL EXCEL ***********************************/
				$objPHPExcel = new \PHPExcel();
				$objPHPExcel->setActiveSheetIndex(0);
                              
                
				// Creación de las letras del abecedario
				for($i=65; $i<=90; $i++) {
					$letra[] = chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'A'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'B'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'C'.chr($i);
				}

                ############################################# css para los titulos ######################################
				$estiloTitle = array(
                    'font' => array(
                              'name'     => 'Arial Narrow',
                              'bold'     => true,
                              'italic'   => false,
                              'strike'   => false,
                              'size'     => 20,
                              'color' => array(
                                  'rgb' => '000000'
                              )
                      ),
                      /*'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),*/
                      'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                      )
          );

          $estiloSubTitle = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => true,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 13,
                        'color' => array(
                            'rgb' => 'ffffff'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          $estiloCabezera = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => true,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 9,
                        'color' => array(
                            'rgb' => '000000'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          $estiloRegistros = array(
              'font' => array(
                        'name'     => 'Arial Narrow',
                        'bold'     => false,
                        'italic'   => false,
                        'strike'   => false,
                        'size'     => 10,
                        'color' => array(
                            'rgb' => '000000'
                        )
                ),
                'borders' => array(
                            'allborders' => array(
                              'style' => \PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),
                'alignment' =>  array(
                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                  'rotation'   => 0,
                  'wrap'       => TRUE
                )
          );

          ############################################# /css  para los titulos  #########################################
				
				/************** INICIO GENERACION DE LOS TITULOS *****************/
				$header =  array_keys($libros[0]); // array_keys($resultado[0]);
                 
                // Rename sheet
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:J1");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "LISTA DE ESPECIES");
               //Subtitulos /// 
               $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:J2");
               $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A2", "INFORMACIÓN GENERAL");
               

                /** ALTURA DE LA FILA */
               $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
               $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(30);
               $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(25);

               /** PARA BLOQUEAR COLUMNAS Y FILAS */
               $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0,4);

               $t = 1;

               for($i=0; $i<count($header); $i++){
                   $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'3', $header[$i]);
                   //$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])->setAutoSize(TRUE); 
                   $t++;
               }
    
               $objPHPExcel->getActiveSheet()->getStyle("A1:J1")->applyFromArray($estiloTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A2:J2")->applyFromArray($estiloSubTitle);
               $objPHPExcel->getActiveSheet()->getStyle("A3:J3")->applyFromArray($estiloCabezera);

               $objPHPExcel->getActiveSheet()
                                        ->getStyle('A2:J2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('375623');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A3:J3')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('E2EFDA');

            /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
            $objPHPExcel->getActiveSheet()->setAutoFilter('A3:J3');

            /************************* ANCHO DE COLUMNAS ***************************/

            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(8);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(40);
            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(22);
            $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(22);
            $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(35);
            $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(15);

            /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
           
				$celda = 4;
				$cnt=1;     
                for($i=0; $i < count($libros); $i++){

					$content = array_values($libros[$i]);

					for($j = 0; $j<count($content); $j++){
                        $objPHPExcel->getActiveSheet()->getRowDimension($j+4)->setRowHeight(17);
                        $objPHPExcel->getActiveSheet()->getStyle($letra[$j].($celda), $cnt)->applyFromArray($estiloRegistros);

						if($j==0){
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $cnt);
						$cnt++;}
						else{
                            
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), 
                        $content[$j]);}					
					}

					$celda ++;
				}
                /************** FIN   *****************/
				header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
				
				header('Content-Disposition: attachment;filename='.$filename .' ');
				header('Cache-Control: max-age=0');
				$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
				$objWriter->save('php://output');
                exit;            
           }
        
        }

        /************** FIN   *****************/
		$handle = fopen("no_data.txt", "w");
		fwrite($handle, "Consulta sin resultados .....");
		fclose($handle);

		header('Content-Type: application/octet-stream');
		header('Content-Disposition: attachment; filename='.basename('no_data.txt'));
		header('Expires: 0');
		header('Cache-Control: must-revalidate');
		header('Pragma: public');
		header('Content-Length: ' . filesize('no_data.txt'));
		readfile('no_data.txt');
		  
		exit;


    
    }

}
