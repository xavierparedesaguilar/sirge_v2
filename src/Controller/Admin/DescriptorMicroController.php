<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;

use Cake\Datasource\ConnectionManager;
use Cake\ORM\Table;
use PDO;

/**
 * Descriptor Controller
 *
 * @property \App\Model\Table\DescriptorTable $Descriptor
 *
 * @method \App\Model\Entity\Descriptor[] paginate($object = null, array $settings = [])
 */
class DescriptorMicroController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_padre = "Fenotípica";
        $this->loadModel('Descriptor');
        $this->loadModel('Specie');
        $this->loadModel('DescriptorState');
        $this->loadModel('DescriptorValue');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'FenotipicaMicro'])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index( $id = null )
    {
        if($this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $id,'Collection.resource_id'=>3])->first();

            if($especie!=NULL){

                $mod_padre  = $this->mod_padre;
                $permiso    = $this->permiso;
                $mod_parent = $especie->collection->colname.' - '.$especie->cropname;

                $descriptor = $this->Descriptor->find()->contain(['Specie', 'Resource'])
                                   ->where(['Descriptor.specie_id' => $id, 'Descriptor.resource_id' => '3', 'Descriptor.type' => 1, 'Specie.cropname' => $especie->cropname, 'Descriptor.status !=' => '0'])->all();

                $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'styles', 'scripts', 'especie','permiso'));
                $this->set('_serialize', ['descriptor']);

            }else {

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'FenotipicaMicro']);

            }

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'FenotipicaMicro']);

        }

    }

    /**
     * View method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($idx = null, $id = null)
    {
        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>3])->first();

        if ($especie!=NULL && $this->permiso['view']) {

            $descriptor = $this->Descriptor->find()->contain(['Specie','Resource'])->where(['Descriptor.id' => $id,'Descriptor.status' =>1,'Descriptor.resource_id'=>3,'Descriptor.specie_id'=>$idx])->first();

            if ($descriptor != NULL) {

               $mod_padre  = $this->mod_padre;
               $permiso    = $this->permiso;
               $this->set(compact('descriptor', 'especie', 'mod_padre'));
               $this->set('_serialize', ['descriptor']);

            } else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$idx]);
            }

         }else{

            //$this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index',$idx]);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($idx = null)
    {
        $descriptor = $this->Descriptor->newEntity();

        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>3])->first();

        if ($especie!=NULL && $this->permiso['add']) {

            $mod_padre  = $this->mod_padre;
            $mod_parent = $especie->collection->colname.' - '.$especie->cropname;

            if ($this->request->is('post')) {

                $data = $this->request->getData();

                $posicion = $this->Descriptor->find()->innerJoinWith('Specie')->where(['Descriptor.specie_id' => $especie->id, 'Descriptor.type' => 1, 'Specie.collection_id' => $especie->collection_id])
                                             ->order(['Descriptor.position' => 'DESC'])->limit(1)->first();

                $data['status'] = '1';
                $data['resource_id'] = '3';
                $data['type'] = '1';
                $data['value_type'] = '1';
                $data['specie_id'] = $especie->id;
                $data['position'] = $posicion['position'] + 1;

                $descriptor = $this->Descriptor->patchEntity($descriptor, $data);

                if ($this->Descriptor->save($descriptor)) {

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-4)];
                    $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                    $station_id = $descriptor->id;
                    $recurso_id = '3';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('Descriptor creado satisfactoriamente.'));

                    return $this->redirect(['action' => 'index', 'id' => $especie->id]);
                }

                $this->Flash->error(__('Hubo inconvenientes al crear el Descriptor. Por favor, Otra vez intente.'));
            }

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'especie', 'scripts'));
            $this->set('_serialize', ['descriptor']);

        }else{

            return $this->redirect(['action' => 'index','controller'=>'DescriptorMicro',$idx]);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($idx = null, $id = null)
    {
        $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>3])->first();

        if ($especie!=NULL && $this->permiso['edit']) {

            $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $id,'Descriptor.resource_id'=>3,'Descriptor.specie_id' => $idx])->first();


            $mod_padre  = $this->mod_padre;
            $mod_parent = $especie->collection->colname.' - '.$especie->cropname;

            if($descriptor!=NULL){

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $descriptor = $this->Descriptor->patchEntity($descriptor, $this->request->getData());

                    if ($this->Descriptor->save($descriptor)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-5)];
                        $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                        $station_id = $descriptor->id;
                        $recurso_id = '3';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('Descriptor actualizado satisfactoriamente.'));

                        return $this->redirect(['action' => 'index',  'id' => $especie->id]);
                    }

                    $this->Flash->error(__('Hubo inconvenientes al actualizar el Descriptor. Por favor, Otra vez intente.'));
                }

                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $this->set(compact('descriptor', 'especie', 'mod_padre', 'mod_parent', 'scripts'));
                $this->set('_serialize', ['descriptor']);

            } else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorMicro',$idx]);

            }
        } else{

            return $this->redirect(['action' => 'index','controller'=>'DescriptorMicro',$idx]);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Descriptor id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */

    public function delete($idx = null, $id = null)
    {

        if ($this->permiso['delete']) {

            $this->request->is(['post', 'delete']);

            $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $id,'Descriptor.resource_id'=>3,'Descriptor.specie_id' => $idx])->first();

            $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>3])->first();

            if($descriptor!= NULL && $especie!=NULL) {
                /********** BUSCO SI EL DESCRIPTOR YA TIENE VALORES ASOCIADOS EN LA CARACTERIZACION *********/
                $total_value = $this->DescriptorValue->find()->where(['descriptor_id' => $descriptor->id])->count();

                if($total_value > 0){

                    $this->Flash->error(__('No se puede eliminar el Descriptor. Tiene registros asociados.'));

                } else {

                    $descriptor['status'] = '0';

                    if ($this->Descriptor->save($descriptor)) {

                        $sql = $this->DescriptorState->find()->where(['descriptor_id' => $descriptor->id]);

                        $count_state = $sql->count();

                        if($count_state > 0){

                            $this->DescriptorState->updateAll(['status' => '0'],['descriptor_id' => $descriptor->id]);
                        }

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-5)];
                        $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                        $station_id = $descriptor->id;
                        $recurso_id = '3';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('Descriptor eliminado satisfactoriamente.'));

                    } else {

                        $this->Flash->error(__('Hubo inconvenientes al eliminar el Descriptor. Por favor, Otra vez intente.'));
                    }
                }

                return $this->redirect(['action' => 'index', 'id' => $especie->id]);

            } else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'DescriptorMicro',$idx]);
            }

        } else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorMicro',$idx]);
        }
    }

    public function caracterizacion($idx = null, $idy = null)
    {
        $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
        $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                    'assets/js/datatable/dataTables.bootstrap.min',
                    'assets/js/datatable/dataTables.select.min'];

        $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>3])->first();

        if( $mod_specie!=NULL) {

            $especie = $mod_specie->species;
            $coleccion = $mod_specie->collection->colname;
            $permiso    = $this->permiso;
            $conn = ConnectionManager::get('default');

            $stmt = $conn->prepare(' CALL usp_caracterizacion_table( ?, ?, 3 ) ');
            $stmt->bindValue(1, $idx, PDO::PARAM_INT);
            $stmt->bindValue(2, $idy, PDO::PARAM_INT);
            $stmt->execute();
            $resultado = $stmt->fetchAll('assoc');

            $this->set(compact('resultado', 'especie', 'coleccion', 'styles', 'scripts','idx','idy','permiso'));

        }else{

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller'=>'FenotipicaMicro']);

        }
    }

    public function ordenar($idx = null, $idy = null)
    {
        if ($this->permiso['edit']) {

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];


            $especie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.resource_id'=>3,'Collection.id'=>$idy])->count();

            if($especie>0) {

                $mod_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' => $idx,'Collection.id' => $idy,'Collection.resource_id'=>3])->first();

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $data =  $this->request->getData();

                    foreach ($data['descriptor_id'] as $key => $value) {

                        $key++;
                        $descriptor = $this->Descriptor->get($value);
                        $descriptor['position'] =$key;
                        $this->Descriptor->save($descriptor);
                    }

                    $this->Flash->success(__('Descriptor ordenado satisfactoriamente.'));

                    return $this->redirect(['action' => 'caracterizacion', 'idx' => $idx,'idy' => $idy]);


                }

                $titulo=' Caracterización - Ordenamiento de Descriptores';
                $titulo_lista ='Descriptores por Especie';

                $descriptor_especie = $this->Descriptor->find()->contain('Specie.Collection')->where(['Descriptor.type' => 1, 'Descriptor.resource_id' => 3, 'Specie.id' => $idx,'Collection.id' => $idy])->order(['position' => 'ASC'])->all();

                $this->set(compact('mod_specie', 'styles', 'scripts','titulo','titulo_lista','descriptor_especie','idx','idy'));

            }else{

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller'=>'FenotipicaMicro']);

            }

        }else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'FenotipicaMicro']);
        }
    }

    public function exportartabla($idx = null) {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }

}
