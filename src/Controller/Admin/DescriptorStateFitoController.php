<?php

namespace App\Controller\Admin;

use Cake\ORM\TableRegistry;
use App\Controller\Admin\AppController;

/**
 * DescriptorState Controller
 *
 * @property \App\Model\Table\DescriptorStateTable $DescriptorState
 *
 * @method \App\Model\Entity\DescriptorState[] paginate($object = null, array $settings = [])
 */
class DescriptorStateFitoController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_padre = "Fenotípica";
        $this->loadModel('Descriptor');
        $this->loadModel('DescriptorState');
        $this->loadModel('Specie');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'FenotipicaFito'])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index( $idx = null, $idy = null )
    {
        $especie = $this->Specie->find()->where(['Specie.id' => $idx])->first();

        if($especie!=NULL && $this->permiso['index']){

            $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $idy,'Descriptor.resource_id'=>1,'Descriptor.specie_id'=>$idx])->first();

            if($descriptor!=NULL){

                    $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
                    $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                                'assets/js/datatable/dataTables.bootstrap.min',
                                'assets/js/datatable/dataTables.select.min'];

                    $descriptorState = $this->DescriptorState->find()->contain('Descriptor')->where(['DescriptorState.descriptor_id' => $idy, 'DescriptorState.status !=' => '0'])->order('DescriptorState.code ASC')->all();
                    $descriptor      = $this->Descriptor->find()->where(['id' => $idy])->first();

                    $mod_padre  = $this->mod_padre;
                    $mod_parent = $descriptor['name'];
                    $permiso    = $this->permiso;

                    $this->set(compact('descriptorState', 'descriptor', 'styles', 'scripts', 'mod_padre', 'mod_parent','permiso', 'especie'));
                    $this->set('_serialize', ['descriptorState']);

            } else {

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);
            }

        } else {

           $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);


        }
    }

    /**
     * View method
     *
     * @param string|null $id Descriptor State id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($idx=NULL,$idy=NULL,$id = null)
    {
         $this->Flash->error(__('Operación denegada.'));
         return $this->redirect(['action' => 'index','controller'=>'DescriptorStateFito',$idx,$idy]);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add( $idx = null, $idy = null )
    {
        $descriptorState = $this->DescriptorState->newEntity();

        $descriptor = $this->Descriptor->find()->where(['id' => $idy,'status' => 1, 'resource_id' => 1,'specie_id'=>$idx])->first();

        if($descriptor!= NULL && $this->permiso['add']){

                $mod_padre  = $this->mod_padre;
                $mod_parent = $descriptor['name'];

                if ($this->request->is('post')) {

                    $data = $this->request->getData();

                    $data['status'] = '1';
                    $data['descriptor_id'] = $descriptor['id'];

                    $descriptorState = $this->DescriptorState->patchEntity($descriptorState, $data);

                    if ($this->DescriptorState->save($descriptorState)) {

                        $descriptorTable = TableRegistry::get('Descriptor');
                        $descriptor_model = $descriptorTable->get($descriptorState->descriptor_id);

                        if($descriptor_model->value_type == '1'){

                            $descriptor_model->value_type = '2';
                            $descriptorTable->save($descriptor_model);
                        }

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-6)];
                        $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                        $station_id = $descriptorState->id;
                        $recurso_id = '1';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('Estado de descriptor creado satisfactoriamente.'));

                        return $this->redirect(['action' => 'index', 'idy' => $descriptor->specie_id, 'idx' => $descriptor->id ]);
                    }

                    $this->Flash->error(__('Hubo inconvenientes al crear el estado del Descriptor. Por favor, Otra vez intente.'));
                }

                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $this->set(compact('descriptorState', 'descriptor', 'mod_padre', 'mod_parent', 'scripts'));
                $this->set('_serialize', ['descriptorState']);

        } else {

            $this->Flash->error(__('Operación denegada.'));
           return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx]);

        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Descriptor State id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit( $idx = null, $idy = null, $id = null )
    {

        $especie = $this->Specie->find()->where(['Specie.id' => $idx])->first();

        if ($especie!=NULL && $this->permiso['edit']) {

             $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $idy,'Descriptor.resource_id'=>1,'Descriptor.specie_id'=>$idx])->first();

             if($descriptor!=NULL){

                $descriptorState = $this->DescriptorState->find()->where(['DescriptorState.status !=' => '0','DescriptorState.id'=>$id,'DescriptorState.descriptor_id'=>$idy])->first();

                if($descriptorState==NULL){

                            $this->Flash->error(__('Operación denegada.'));
                            return $this->redirect(['action' => 'index',$idx,$idy]);
                } else {

                    $mod_padre  = $this->mod_padre;
                    $mod_parent = $descriptor['name'];

                    if ($this->request->is(['patch', 'post', 'put'])) {

                        $descriptorState = $this->DescriptorState->patchEntity($descriptorState, $this->request->getData());

                        if ($this->DescriptorState->save($descriptorState)) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-7)];
                            $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                            $station_id = $descriptorState->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('Estado de descriptor actualizado satisfactoriamente.'));

                            return $this->redirect(['action' => 'index', 'idy' => $descriptor->specie_id, 'idx' => $descriptor->id]);
                        }

                        $this->Flash->error(__('Hubo inconvenientes al actualizar el estado del Descriptor. Por favor, Otra vez intente.'));
                    }

                }

                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                $this->set(compact('descriptorState', 'descriptor', 'mod_padre', 'mod_parent', 'scripts'));
                $this->set('_serialize', ['descriptorState']);

            } else {

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'DescriptorStateFito',$idx,$idy]);

            }

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorStateFito',$idx,$idy]);

        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Descriptor State id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($idx = null, $idy = null, $id = null)
    {
        $especie = $this->Specie->find()->where(['Specie.id' => $idx])->first();

        if ($especie!=NULL && $this->permiso['delete']) {

            $descriptor = $this->Descriptor->find()->where(['Descriptor.status '=>'1','id' => $idy,'Descriptor.resource_id'=>1,'Descriptor.specie_id'=>$idx])->first();

            if($descriptor!=NULL){

                $descriptorState = $this->DescriptorState->find()->where(['DescriptorState.status !=' => '0','DescriptorState.id'=>$id,'DescriptorState.descriptor_id'=>$idy])->first();

                if($descriptorState==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$idx,$idy]);
                } else {

                $this->request->is(['post', 'delete']);

                $descriptorState = $this->DescriptorState->get($id);
                $descriptorState['status'] = '0';

                if ($this->DescriptorState->save($descriptorState)) {

                    $count_state = $this->DescriptorState->find()->where(['descriptor_id' => $descriptorState->descriptor_id, 'status' => '1'])->count();

                    if( $count_state == 0 ){

                        $descriptorFito = TableRegistry::get('Descriptor');
                        $temp = $descriptorFito->get($descriptorState->descriptor_id);
                        $temp->value_type = '1';
                        $descriptorFito->save($temp);
                    }

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-7)];
                    $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                    $station_id = $descriptorState->id;
                    $recurso_id = '1';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('Estado del descriptor eliminado satisfactoriamente.'));

                } else {

                    $this->Flash->error(__('Hubo inconvenientes al eliminar el estado del Descriptor. Por favor, Otra vez intente.'));
                }

                return $this->redirect(['action' => 'index', 'idy' => $descriptor->specie_id, 'idx' => $descriptor->id]);
                }

            } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index','controller'=>'DescriptorStateFito',$idx,$idy]);

            }

        } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'DescriptorFito',$idx,$idy]);

        }
    }

    public function exportartabla($idx = null, $idy = null) {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }


}
