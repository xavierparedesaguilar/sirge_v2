<?php
namespace App\Controller\Admin;

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use Cake\Datasource\loadModel;

/**
 * BankDna Controller
 *
 * @property \App\Model\Table\BankDnaTable $BankDna
 *
 * @method \App\Model\Entity\BankDna[] paginate($object = null, array $settings = [])
 */
class BankDnaController extends AppController
{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Gestión Inventario";
        $this->mod_padre = "Banco ADN";
        $this->loadModel('Ubigeo');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');
        $this->loadModel('InputDna');
        $this->loadModel('OutputDna');
        $this->loadModel('ExtractionDna');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {


        if($this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $bankDna = $this->BankDna->find()
                                             ->contain('Passport.Specie.Collection')
                                             ->leftJoinWith('Passport.Specie.Collection')
                                             ->where(['BankDna.status !=' => '0','BankDna.type_resource '=>'1']);

            $titulo = $this->mod_parent ." - ".$this->mod_padre;
            $titulo_lista =$this->mod_padre;
            $permiso= $this->permiso;

            $this->set(compact('bankDna', 'titulo','styles','scripts','titulo_lista','permiso'));

            $this->set('_serialize', ['bankDna']);

        } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

       }

    }


    /**
     * View method
     *
     * @param string|null $id Bank Dna id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {

        if($this->permiso['view']){

            $bankDna = $this->BankDna->find()->contain('Passport.Specie.Collection')
                                             ->leftJoinWith('Passport.Specie.Collection')
                                             ->where(['BankDna.status !=' => '0','BankDna.id '=>$id,'BankDna.type_resource '=>1])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$bankDna->passport->station_current_id;

            if($bankDna ==NULL){

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller'=>'BankDna']);

            }
            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso= $this->permiso;

            $this->set(compact('bankDna', 'titulo', 'parent','id','permiso','validar'));
            $this->set('_serialize', ['bankDna']);

        } else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {

        if($this->permiso['add']){

            $bankDna = $this->BankDna->newEntity();

            $modulo=$this->mod_padre;
            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];
            if ($this->request->is('post')) {

                $data = $this->request->getData();
                $data['status'] = '1';
                $data['bank_availability'] = '1';
                $data['type_resource'] = '1';


                try{
                    $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                    $bankDna = $this->BankDna->patchEntity($bankDna, $data);


                    if($data['passport_id']!=null || $data['passport_id']!=''){
                        if ($this->BankDna->save($bankDna)) {

                            $bankDna_update = $this->BankDna->get($bankDna->id);
                            $bankDna_update->lotnumb = $bankDna->id;

                            if ($this->BankDna->save($bankDna_update)) {

                              $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-2)];
                                    $action     = $list_module[(count($list_module)-1)];
                                    $station_id = $bankDna_update->id;
                                    $recurso_id = '1';

                              $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                              return $this->redirect(['controller' => 'ExtractionDna', 'action' => 'add',$bankDna->id]);
                            }



                        }
                    }

                    $this->Flash->error(__('Hubo inconvenientes al crear el Banco ADN. Por favor, Otra vez intente.'));

                } catch (\Exception $e) {

                        $this->Flash->error(__('Hubo inconvenientes al crear el Banco ADN. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
                }
            }

            $tipo_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

            $this->set(compact('bankDna', 'modulo','tipo_disponibilidad','scripts'));

            $this->set('_serialize', ['bankDna']);

        } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }

    }

    /**
     * Edit method
     *
     * @param string|null $id Bank Dna id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {


        $bankDna =$this->BankDna->find()->contain('Passport')
                                             ->leftJoinWith('Passport')
                                             ->where(['Passport.status' => '1', 'Passport.resource_id' => 1,'BankDna.id'=>$id,'BankDna.type_resource'=>1])->first();

        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$bankDna->passport->station_current_id;


       if($this->permiso['edit'] /*&& $validar*/){


            if($bankDna==NULL){

                            $this->Flash->error(__('Operación denegada.'));
                            return $this->redirect(['action' => 'index','controller' => 'BankDna']);
            }else{

            $modulo=$this->mod_padre;
            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            $passport =$this->Passport->find()->contain('Specie.Collection')
                                             ->leftJoinWith('Specie.Collection')
                                             ->where(['Passport.status' => '1', 'Passport.resource_id' => 1,'Passport.id'=>$bankDna->passport_id])->first();

            if ($this->request->is(['patch', 'post', 'put'])) {

                $data = $this->request->getData();
                $data['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                try{

                    $data['passport_id']= strlen($data['passport_id'])==0 ? $bankDna->passport_id : $data['passport_id'];

                    $bankDna = $this->BankDna->patchEntity($bankDna, $data);

                    if ($this->BankDna->save($bankDna)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-3)];
                                    $action     = $list_module[(count($list_module)-2)];
                                    $station_id = $bankDna->id;
                                    $recurso_id = '1';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);
                        $extractionDna =$this->ExtractionDna->find()->contain('BankDna')
                                             ->where(['ExtractionDna.status' => '1','BankDna.id'=>$id])->first();

                        if($extractionDna!=null)
                            return $this->redirect(['controller' => 'ExtractionDna', 'action' => 'edit',$bankDna->id]);

                        else
                            return $this->redirect(['controller' => 'ExtractionDna', 'action' => 'add',$bankDna->id]);

                    }
                    $this->Flash->error(__('Hubo inconvenientes al actualizar el Banco ADN. Por favor, Otra vez intente.'));
                } catch (\Exception $e) {

                    $this->Flash->error(__('Hubo inconvenientes al actualizar el Banco ADN. Por favor, Otra vez intente.'));
                    return $this->redirect(['action' => 'index']);
                   }
            }

            $tipo_disponibilidad= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 330, 'status' => 1, 'OR' => [['resource_id' => 4]] ]);

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;



            $bankDna->acqdate = ($bankDna->acqdate == NULL) ? NULL : date('d-m-Y', strtotime($bankDna->acqdate));

            $this->set(compact('scripts','bankDna','titulo','parent','passport','modulo','tipo_disponibilidad','id'));

            $this->set('_serialize', ['bankDna']);

            }

        } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);

        }

    }

    /**
     * Delete method
     *
     * @param string|null $id Bank Dna id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
       $bankDna =$this->BankDna->find()->contain('Passport')
                                             ->leftJoinWith('Passport')
                                             ->where(['Passport.status' => '1', 'Passport.resource_id' => 1,'BankDna.id'=>$id,'BankDna.type_resource'=>1])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$bankDna->passport->station_current_id;


        if($this->permiso['delete'] /*&& $this->permiso['station_id']==$validar*/){

                $bankDna_count = $this->BankDna->find()->where(['BankDna.status '=>'1','BankDna.id'=>$id,'BankDna.type_resource '=>1])->count();

                if($bankDna_count>0){

                    $bankDna = $this->BankDna->find()
                                                 ->where(['BankDna.status !=' => '0','BankDna.id'=>$id,'BankDna.type_resource '=>1
                                                    ])->first()  ;

                    if($bankDna==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index']);

                    }else{

                        $bankDna['status'] = 0;

                        if ($this->BankDna->save($bankDna)) {

                            $inputField = TableRegistry::get("InputDna");
                            $query = $inputField->query();
                            $query->update()
                                  ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                                  ->where(['bank_dna_id' => $id])
                                  ->execute();

                            $outputField = TableRegistry::get("OutputDna");
                            $query = $outputField->query();
                            $query->update()
                              ->set(['modified  ' => date('Y-m-d H:i:s'),'status'=>0])
                              ->where(['bank_dna_id' => $id])
                              ->execute();

                            $evaluationField = TableRegistry::get("ExtractionDna");
                            $query = $evaluationField->query();
                            $query->update()
                              ->set(['modified' => date('Y-m-d H:i:s'),'status'=>0])
                              ->where(['bank_dna_id' => $id])
                              ->execute();

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                            $user_id    = $this->Auth->User('id');
                            $module     = $list_module[(count($list_module)-3)];
                            $action     = $list_module[(count($list_module)-2)];
                            $station_id = $bankDna->id;
                            $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $this->Flash->success(__('El Banco ADN fue eliminado satisfactoriamente.'));

                        } else {
                             $this->Flash->error(__('Hubo inconvenientes al eliminar el Banco ADN . Por favor, Otra vez intente.'));
                        }

                       return $this->redirect(['action' => 'index']);
                    }

                }else{

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller' => 'BankDna']);

                }


        } else {

        $this->Flash->error(__('Operación denegada.'));
        return $this->redirect(['action' => 'index']);

        }

    }

    public function exportartabla() {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }

}

