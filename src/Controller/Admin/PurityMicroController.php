<?php

namespace App\Controller\Admin;

use App\Controller\Admin\AppController;

/**
 * PurityMicro Controller
 *
 * @property \App\Model\Table\PurityMicroTable $PurityMicro
 *
 * @method \App\Model\Entity\PurityMicro[] paginate($object = null, array $settings = [])
 */
class PurityMicroController extends AppController
{


    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_parent = "Banco Microorganismo ";
        $this->mod_padre = "Prueba de Pureza";
        $this->loadModel('BankMicro');
        $this->loadModel('OptionList');
        $this->loadModel('Passport');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => 'BankMicro'])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index($id=null)
    {
        $bankMicro_count = $this->BankMicro->find()->where(['BankMicro.status '=>'1','BankMicro.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankMicro_count->passport_id])->first();

        if($bankMicro_count !=NULL && $this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $purityMicro = $this->PurityMicro->find()->where(['PurityMicro.status !=' => '0', 'bank_micro_id' => $id]);
            $titulo=$this->mod_parent.' - '. $this->mod_padre;
            $titulo_lista=$this->mod_padre;
            $permiso= $this->permiso;

            $this->set(compact('purityMicro','styles','scripts','titulo','titulo_lista','id','permiso','passport'));
            $this->set('_serialize', ['purityMicro']);

        } else{

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect(['action' => 'index','controller'=>'BankMicro']);
        }
    }

    /**
     * View method
     *
     * @param string|null $id Purity Micro id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
   public function view($id = null,$child=null)
    {
        $bankMicro_count = $this->BankMicro->find()->where(['BankMicro.status '=>'1','BankMicro.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankMicro_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankMicro_count ==NULL || !$this->permiso['view']){

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller'=>'BankMicro']);

        }else{

            $purityMicro = $this->PurityMicro->find()
                                             ->where(['PurityMicro.status !=' => '0','PurityMicro.id'=>$child,'PurityMicro.bank_micro_id'=>$id
                                                ])->first();

            if($purityMicro==NULL){

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$id]);
            }

            $titulo = $this->mod_padre;
            $parent = $this->mod_parent;
            $permiso= $this->permiso;

            $this->set(compact('purityMicro','titulo','permiso','id','child','validar'));
            $this->set('_serialize', ['purityMicro']);
        }

    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id=null)
    {

        $bankMicro_count = $this->BankMicro->find()->where(['BankMicro.status '=>'1','BankMicro.id'=>$id])->count();

        if($bankMicro_count>0 && $this->permiso['add']){

        $purityMicro = $this->PurityMicro->newEntity();
        $modulo= $this->mod_padre ;
        $purityMicro->bank_micro_id=$id;
        $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

        if ($this->request->is('post')) {
            $data=$this->request->getData();
            $data['status']=1;
            try{
                    $data['bank_micro_id']= $id;
                    $data['datepurz'] = ($data['fecha_prueba'] == '' || $data['fecha_prueba'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_prueba']));

                    $purityMicro = $this->PurityMicro->patchEntity($purityMicro,$data);

                    if ($this->PurityMicro->save($purityMicro)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-4)];
                        $action     = $list_module[(count($list_module)-2)].'/'.$list_module[(count($list_module)-1)];
                        $station_id = $purityMicro->id;
                        $recurso_id = '3';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('La Prueba de Pureza fue creada satisfactoriamente.'));

                        return $this->redirect(['action' => 'index',$purityMicro->bank_micro_id]);
                    }

             } catch (\Exception $e) {

                    $this->Flash->error(__('Hubo inconvenientes al crear la Prueba de Pureza. Por favor, Otra vez intente.'.$e->getMessage()));

                  return $this->redirect(['action' => 'index',$purityMicro->bank_micro_id]);
            }
        }

        $lista_aislamiento1= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 504, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_aislamiento2= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 508, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_tincion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 511, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_lactofenol= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 516, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $this->set(compact('scripts','purityMicro','modulo','id','lista_estado','lista_aislamiento1','lista_aislamiento2','lista_tincion','lista_lactofenol'));
        $this->set('_serialize', ['purityMicro']);

        }else {

                 $this->Flash->error(__('Operación denegada.'));
                 return $this->redirect(['action' => 'index','controller'=>'BankMicro']);
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Purity Micro id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null,$child=null)
    {
        $bankMicro_count = $this->BankMicro->find()->where(['BankMicro.status '=>'1','BankMicro.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankMicro_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankMicro_count!=NULL /*&& $validar*/){

            $purityMicro = $this->PurityMicro->find()
                                         ->where(['PurityMicro.status !=' => '0','PurityMicro.id'=>$child,'PurityMicro.bank_micro_id'=>$id
                                            ])->first();

            if($purityMicro==NULL){

                        $this->Flash->error(__('Operación denegada.'));
                        return $this->redirect(['action' => 'index',$id]);
            } else {

                $modulo=$this->mod_padre ;
                $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

                if ($this->request->is(['patch', 'post', 'put'])) {
                    $data=$this->request->getData();
                    $data['datepurz'] = ($data['fecha_prueba'] == '' || $data['fecha_prueba'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_prueba']));
                     try{
                            $purityMicro = $this->PurityMicro->patchEntity($purityMicro,$data);

                            if ($this->PurityMicro->save($purityMicro)) {

                                $list_module = explode('/', $this->request->params['_matchedRoute']);

                                $user_id    = $this->Auth->User('id');
                                $module     = $list_module[(count($list_module)-5)];
                                $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                                $station_id = $purityMicro->id;
                                $recurso_id = '3';

                                $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                                $this->Flash->success(__('La Prueba de Pureza fue actualizada satisfactoriamente.'));

                                return $this->redirect(['action' => 'index',$purityMicro->bank_micro_id]);
                            }
                            $this->Flash->error(__('Hubo inconvenientes al actualizar la Prueba de Pureza. Por favor, Otra vez intente.'));

                        } catch (\Exception $e) {

                            $this->Flash->error(__('Hubo inconvenientes al actualizar la Prueba de Pureza. Por favor, Otra vez intente.'));
                            return $this->redirect(['action' => 'index']);
                    }
                }
            }

        $purityMicro->datepurz=($purityMicro->datepurz == NULL) ? NULL : date('d-m-Y', strtotime($purityMicro->datepurz));

        $lista_aislamiento1= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 504, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_aislamiento2= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 508, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_tincion= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 511, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $lista_lactofenol= $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 516, 'status' => 1, 'OR' => [['resource_id' => 3]] ]);

        $this->set(compact('scripts','purityMicro','modulo','lista_estado','id','lista_aislamiento1','lista_aislamiento2','lista_tincion','lista_lactofenol','child'));
        $this->set('_serialize', ['purityMicro']);

        } else {
                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller' => 'BankMicro']);
        }
    }

    /**
     * Delete method
     *
     * @param string|null $id Purity Micro id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null,$child=null)
    {
        $bankMicro_count = $this->BankMicro->find()->where(['BankMicro.status '=>'1','BankMicro.id'=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$bankMicro_count->passport_id])->first();
        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($bankMicro_count!=NULL /*&& $validar*/ ){

            $this->request->is(['post', 'delete']);

            $purityMicro = $this->PurityMicro->find()
                                         ->where(['PurityMicro.status !=' => '0','PurityMicro.id'=>$child,'PurityMicro.bank_micro_id'=>$id
                                            ])->first();

            if($purityMicro==NULL){

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index',$id]);
            }else{

                $purityMicro['status'] = 0;

                if ($this->PurityMicro->save($purityMicro)) {

                    $list_module = explode('/', $this->request->params['_matchedRoute']);

                    $user_id    = $this->Auth->User('id');
                    $module     = $list_module[(count($list_module)-5)];
                    $action     = $list_module[(count($list_module)-3)].'/'.$list_module[(count($list_module)-2)];
                    $station_id = $purityMicro->id;
                    $recurso_id = '3';

                    $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                    $this->Flash->success(__('La Salida Material fue eliminado satisfactoriamente.'));
                } else {
                     $this->Flash->error(__('Hubo inconvenientes al eliminar la Entrada Material . Por favor, Otra vez intente.'));
                }

               return $this->redirect(['action' => 'index', $purityMicro->bank_micro_id]);
            }

        }else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index','controller' => 'BankMicro']);

        }
    }

    public function exportartabla($id = null) {

        if ($this->request->is('post')) {

            $data = $this->request->getData();

            $filePath = WWW_ROOT .'reportes/'.$data['filename'].'.xlsx';

            if(file_exists($filePath)){

                $this->response->file($filePath , array('download'=> true));

                return $this->response;

            } else {

                $this->Flash->error(__('No existe el archivo.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }


}
