<?php

namespace App\Controller\Admin;

use Cake\Datasource\ConnectionManager;
use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;
use PDO;

/**
 * Descriptor Controller
 *
 * @property \App\Model\Table\DescriptorTable $Descriptor
 *
 * @method \App\Model\Entity\Descriptor[] paginate($object = null, array $settings = [])
 */
class FenotipicaZooController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->mod_padre  = "Caracterización";
        $this->mod_parent = "Fenotípica";
        $this->loadModel('Descriptor');
        $this->loadModel('Collection');
        $this->loadModel('Specie');
        $this->loadModel('TempDescriptores');

        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty($this->module))
          $this->permiso=$this->Functions->validarModulo($this->module->id);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        if($this->permiso['index']){

            $mod_parent  = $this->mod_parent;
            $mod_padre   = $this->mod_padre;
            $permiso     = $this->permiso;
            $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                            ->where(['resource_id' => 2, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            if ($this->request->is('post')) {

                $data = $this->request->getData();

                $especie_idx   = $this->Specie->find()->where(['collection_id' => $data['coleccion_id'], 'cropname' => $data['nombre_comun']])->first();

                return $this->redirect(['action' => 'buscar', 'idx' => $data['coleccion_id'], 'idy' => $especie_idx['id'] ]);

            } else {

                $this->set(compact('mod_padre', 'mod_parent', 'colecciones', 'styles', 'scripts','permiso'));
            }
        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect($this->Auth->redirectUrl());

        }
    }

    public function buscar( $idx = null , $idy = null )
    {
        $mod_parent  = $this->mod_parent;
        $mod_padre   = $this->mod_padre;
        $permiso     = $this->permiso;

        $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                        ->where(['resource_id' => 2, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);

        $styles  = ['assets/css/dataTables.bootstrap'];
        $scripts = ['assets/js/datatable/jquery.dataTables.min',
                    'assets/js/datatable/dataTables.bootstrap.min',
                    'assets/packages/jqueryvalidation/dist/jquery.validate'];

        $coleccion_idx = $this->Collection->find()->where(['id' => $idx ])->first();
        $especie_idx   = $this->Specie->find()->where(['collection_id' => $idx, 'id' => $idy ])->first();
        $especies      = $this->Specie->find('list', ['keyField' => 'cropname',
                                                      'valueField' => function ($row) {
                                                                        return mb_strtoupper($row['genus'],'UTF-8') . ' ' . mb_strtoupper($row['species'],'UTF-8');
                                                        }])->where(['collection_id' => $idx ]);

        $lista_especie = $this->Specie->find()->contain('Collection')->where(['Specie.collection_id' => $idx, 'Specie.cropname' => $especie_idx->cropname ])->all();

        $this->set(compact('mod_padre', 'mod_parent', 'colecciones', 'lista_especie', 'styles', 'scripts', 'coleccion_idx', 'especie_idx', 'especies', 'permiso'));
    }

    public function importar()
    {

        if($this->permiso['import']){

            $descriptor = $this->Descriptor->newEntity();

            $mod_parent = $this->mod_parent;
            $mod_padre  = $this->mod_padre;
            $permiso= $this->permiso;

            $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                            ->where(['resource_id' => 2, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            $especie_idx=[];
            $value_specie='';
            $especie_nombre='';

            $especie_idy=[];
            $value_specie_idy='';
            $especie_nombre_idy='';

            if ($this->request->is('post')) {

                $data =  $this->request->getData();

                $tipo_agrupacion = (!empty($data['tipo_agrupacion']))? $data['tipo_agrupacion'] : '0';

                $user_id = $this->Auth->User('id');

                if($data['form_tipo'] == 1){

                    $especie_idx = $this->Specie->find('list', ['keyField' => 'id',
                                                                      'valueField' => function ($row) {
                                                                            return mb_strtoupper($row['genus'],'UTF-8') . ' ' . mb_strtoupper($row['species'],'UTF-8');
                                                                        }])
                                              ->where(['collection_id' => $data['coleccion_id'] , 'status' => 1]);

                    $value_specie= $data['passport']['specie_id'];
                    $especie_nombre   = $this->Specie->find()->where(['collection_id' => $data['coleccion_id'] , 'id' => $data['passport']['specie_id'] ])->first();

                        $especie_nombre =strtoupper($especie_nombre->cropname);

                    $model_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' =>  $data['passport']['specie_id'] ])->first();

                    /****  Carga de archivo  ***/
                    $dir_subida = WWW_ROOT.'pass_fitogenetico'.DS;
                    $fichero_subido = $dir_subida . basename($data['file_carga']['name']);
                    $file_input = $data['file_carga']['name'];  // SE CARGA EL NOMBRE DEL ARCHIVO CARGADO

                    if(move_uploaded_file($data['file_carga']['tmp_name'], $fichero_subido)){

                        $inputFileName = $fichero_subido;

                        try
                        {
                            $conn = ConnectionManager::get('default');

                            $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
                            $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                            $objPHPExcel = $objReader->load($inputFileName);

                            //  Get worksheet dimensions
                            $sheet = $objPHPExcel->getSheet(0);
                            $highestRow = $sheet->getHighestRow();

                            if($highestRow > 1){

                                $highestColumn = $sheet->getHighestColumn();
                                $total_column = \PHPExcel_Cell::columnIndexFromString($sheet->getHighestColumn());

                                //************************* NOMBRES DE LAS CABECERAS ***************************//
                                $header_excel = array('DESCRIPTOR', 'TITULO', 'DESCRIPCION');

                                if($total_column == 3)
                                {
                                    $cont = 0;
                                    for ($row = 1; $row < 2; $row++){

                                        $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                        for ($i=0; $i < $total_column; $i++) {

                                            if($header_excel[$i] == trim($rowData[0][$i])){
                                                $cont++;
                                            }
                                        }
                                    }

                                    /************************ SE VERIFICA LOS NOMBRES DE LAS CABECERAS ***********************/
                                    if($cont == $total_column){

                                        /******** SE ELIMINA LOS REGISTROS ANTERIORES ********/
                                        $sql_1 = $conn->prepare(" DELETE FROM temp_descriptores WHERE recurso = 2 AND tipo_carga = 1 AND user_id = ? ");
                                        $sql_1->bindValue(1, $user_id, PDO::PARAM_STR);
                                        $sql_1->execute();

                                        for ($row = 2; $row <= $highestRow; $row++){

                                            $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                            $temp = TableRegistry::get('TempDescriptores');
                                            $temp_caract = $temp->newEntity();

                                            $temp_caract->especie = $model_specie->species;
                                            $temp_caract->coleccion = $model_specie->collection->colname;
                                            $temp_caract->campo_1 = $rowData[0][0];
                                            $temp_caract->campo_2 = $rowData[0][1];
                                            $temp_caract->campo_3 = $rowData[0][2];
                                            $temp_caract->recurso = '2';
                                            $temp_caract->tipo_carga = '1';
                                            $temp_caract->user_id = $user_id;
                                            $temp->save($temp_caract);
                                        }

                                        $stmt = $conn->prepare(' CALL usp_import_descriptor(2, 1, 1, 0, ?, ?, ?) ');
                                        $stmt->bindValue(1, $model_specie->id, PDO::PARAM_STR);
                                        $stmt->bindValue(2, $model_specie->collection_id, PDO::PARAM_STR);
                                        $stmt->bindValue(3, $user_id, PDO::PARAM_STR);
                                        $stmt->execute();

                                        $temp_descriptor = $this->TempDescriptores->find('all')->where(['user_id' => $user_id, 'recurso' => 2, 'tipo_carga' => '1'])->toArray();

                                        $this->Flash->success(__('Descriptores importados exitosamente.'));

                                        $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'temp_descriptor', 'model_specie', 'tipo_agrupacion', 'scripts','permiso'));
                                        unlink($inputFileName);

                                    } else {

                                        unlink($inputFileName);
                                        $this->Flash->error(__('Los nombres de las cabeceras del archivo no corresponde al formato. Por favor, otra vez intente.'));
                                        return $this->redirect(['action' => 'importar']);
                                    }

                                } else {

                                    unlink($inputFileName);
                                    $this->Flash->error(__('El total de columnas es distinta a la plantilla (3). Por favor, Otra vez intente.'));
                                    return $this->redirect(['action' => 'importar']);
                                }
                            } else {

                                unlink($inputFileName);
                                $this->Flash->error(__('El archivo no contiene registros. Por favor, Otra vez intente.'));
                                return $this->redirect(['action' => 'importar']);
                            }

                        } catch(Exception $e) {

                            die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());
                        }

                    } else {

                        unlink($inputFileName);
                        $this->Flash->error(__('Hubo inconvenientes al cargar el archivo. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'importar']);
                    }

                /****************  CARGA DE ESTADOS DESCRIPTEROS EN LA TABLA TEMP ********************/
                } if($data['form_tipo'] == 2){

                    $especie_idy = $this->Specie->find('list', ['keyField' => 'id',
                                                                      'valueField' => function ($row) {
                                                                            return mb_strtoupper($row['genus'],'UTF-8') . ' ' . mb_strtoupper($row['species'],'UTF-8');
                                                                        }])
                                              ->where(['collection_id' => $data['coleccion_id_'] , 'status' => 1]);


                    $value_specie_idy= $data['especie_id'];

                    $especie_nombre_idy   = $this->Specie->find()->where(['collection_id' => $data['coleccion_id_'] , 'id' => $data['especie_id']])->first();

                    $especie_nombre_idy =strtoupper($especie_nombre_idy->cropname);

                    $model_specie = $this->Specie->find()->contain('Collection')->where(['Specie.id' =>  $data['especie_id'] ])->first();


                    /****  Carga de archivo  ***/
                    $dir_subida = WWW_ROOT.'pass_fitogenetico'.DS;
                    $fichero_subido = $dir_subida . basename($data['file_estado']['name']);
                    $file_input = $data['file_estado']['name'];  // SE CARGA EL NOMBRE DEL ARCHIVO CARGADO

                    if(move_uploaded_file($data['file_estado']['tmp_name'], $fichero_subido)){

                        $inputFileName = $fichero_subido;

                        try
                        {
                            $conn = ConnectionManager::get('default');

                            $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
                            $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                            $objPHPExcel = $objReader->load($inputFileName);

                            //  Get worksheet dimensions
                            $sheet = $objPHPExcel->getSheet(0);
                            $highestRow = $sheet->getHighestRow();

                            if($highestRow > 1){

                                $highestColumn = $sheet->getHighestColumn();
                                $total_column = \PHPExcel_Cell::columnIndexFromString($sheet->getHighestColumn());

                                //************************* NOMBRES DE LAS CABECERAS ***************************//
                                $header_excel = array('DESCRIPTOR','ESTADO','NOMBRE DEL ESTADO (DESCRIPCION)');

                                if($total_column == 3)
                                {
                                    $cont = 0;
                                    for ($row = 1; $row < 2; $row++){

                                        $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                        for ($i=0; $i < $total_column; $i++) {

                                            if($header_excel[$i] == trim($rowData[0][$i])){
                                                $cont++;
                                            }
                                        }
                                    }

                                    /************************ SE VERIFICA LOS NOMBRES DE LAS CABECERAS ***********************/
                                    if($cont == $total_column){

                                        /******** SE ELIMINA LOS REGISTROS ANTERIORES ********/
                                        $sql_1 = $conn->prepare(" DELETE FROM temp_descriptores WHERE recurso = 2 AND tipo_carga = 2 AND user_id = ? ");
                                        $sql_1->bindValue(1, $user_id, PDO::PARAM_STR);
                                        $sql_1->execute();

                                        for ($row = 2; $row <= $highestRow; $row++){

                                            $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                            $temp = TableRegistry::get('TempDescriptores');
                                            $temp_caract = $temp->newEntity();

                                            $temp_caract->especie = $model_specie->species;
                                            $temp_caract->coleccion = $model_specie->collection->colname;
                                            $temp_caract->campo_1 = $rowData[0][0];
                                            $temp_caract->campo_2 = $rowData[0][1];
                                            $temp_caract->campo_3 = $rowData[0][2];
                                            $temp_caract->recurso = '2';
                                            $temp_caract->tipo_carga = '2';
                                            $temp_caract->user_id = $user_id;
                                            $temp->save($temp_caract);

                                        }

                                        $stmt = $conn->prepare(' CALL usp_import_descriptor(2, 1, 2, 0, ?, ?, ?) ');
                                        $stmt->bindValue(1, $model_specie->id, PDO::PARAM_STR);
                                        $stmt->bindValue(2, $model_specie->collection_id, PDO::PARAM_STR);
                                        $stmt->bindValue(3, $user_id, PDO::PARAM_STR);
                                        $stmt->execute();

                                        $temp_state = $this->TempDescriptores->find('all')->where(['user_id' => $user_id, 'recurso' => 2, 'tipo_carga' => '2'])->toArray();

                                        $this->Flash->success(__('Estado de descriptores importados exitosamente.'));

                                        $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'temp_state', 'model_specie', 'tipo_agrupacion', 'scripts','permiso'));
                                        unlink($inputFileName);

                                    } else {

                                        unlink($inputFileName);
                                        $this->Flash->error(__('Los nombres de las cabeceras del archivo no corresponde al formato. Por favor, otra vez intente.'));
                                        return $this->redirect(['action' => 'importar']);
                                    }

                                } else {

                                    unlink($inputFileName);
                                    $this->Flash->error(__('El total de columnas es distinta a la plantilla (3). Por favor, Otra vez intente.'));
                                    return $this->redirect(['action' => 'importar']);
                                }

                            } else {

                                unlink($inputFileName);
                                $this->Flash->error(__('El archivo no contiene registros. Por favor, Otra vez intente.'));
                                return $this->redirect(['action' => 'importar']);
                            }

                        } catch(Exception $e) {

                            die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());
                        }

                    } else {

                        unlink($inputFileName);
                        $this->Flash->error(__('Hubo inconvenientes al cargar el archivo. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'importar']);
                    }
                }
            }

            $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts','permiso','especie_idx','value_specie','especie_nombre','especie_idy','value_specie_idy','especie_nombre_idy'));
            $this->set('_serialize', ['descriptor']);

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);

        }
    }


    /************ se graba en la base de datos los registros validos del excel ************/
    public function uploadfile()
    {
        if ($this->request->is('post')) {

            $data =  $this->request->getData();

            $conn = ConnectionManager::get('default');

            $uid = $this->Auth->User('id');
            $tipo_agrupacion = (!empty($data['tipo_agrupacion']))? $data['tipo_agrupacion'] : '0';

            if($data['form_tipo'] == 1){

                $stmt = $conn->prepare(' CALL usp_import_descriptor( 2, 2, 1, ?, ?, ?, ? ) ');
                $stmt->bindValue(1, $tipo_agrupacion, PDO::PARAM_STR);
                $stmt->bindValue(2, $data['especie_id'], PDO::PARAM_STR);
                $stmt->bindValue(3, $data['colection_id'], PDO::PARAM_STR);
                $stmt->bindValue(4, $uid, PDO::PARAM_STR);
                $stmt->execute();

                $this->Flash->success(__('Importación de Fenotípica - Descriptores fue realizado satisfactoriamente.'));
                return $this->redirect(['action' => 'index']);

            } else if($data['form_tipo'] == 2){

                $stmt = $conn->prepare(' CALL usp_import_descriptor( 2, 2, 2, ?, ?, ?, ? ) ');
                $stmt->bindValue(1, $tipo_agrupacion, PDO::PARAM_STR);
                $stmt->bindValue(2, $data['especie_id'], PDO::PARAM_STR);
                $stmt->bindValue(3, $data['colection_id'], PDO::PARAM_STR);
                $stmt->bindValue(4, $uid, PDO::PARAM_STR);
                $stmt->execute();

                $this->Flash->success(__('Importación de Fenotípica - Estados fue realizado satisfactoriamente.'));
                return $this->redirect(['action' => 'index']);
            }
        }
    }

    public function importarCaracterizacion()
    {
        if($this->permiso['import']){

            $descriptor = $this->Descriptor->newEntity();

            $mod_parent = $this->mod_parent;
            $mod_padre  = $this->mod_padre;
            $permiso= $this->permiso;

            $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                            ->where(['resource_id' => 2, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            if ($this->request->is('post')) {

                $data =  $this->request->getData();

                $conn = ConnectionManager::get('default');

                $user_id = $this->Auth->User('id');

                /************************ VALIDACION DEL ARCHIVO DE CARGA DE CARACTERIZACION *****************************/
                /****  Carga de archivo  ***/
                $dir_subida = WWW_ROOT.'pass_zoogenetico'.DS;
                $fichero_subido = $dir_subida . basename($data['file_caracterizacion']['name']);
                $file_input = $data['file_caracterizacion']['name'];  // SE CARGA EL NOMBRE DEL ARCHIVO CARGADO

                if(move_uploaded_file($data['file_caracterizacion']['tmp_name'], $fichero_subido)){

                    $inputFileName = $fichero_subido;

                    try
                    {
                        $conn = ConnectionManager::get('default');

                        $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
                        $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                        $objPHPExcel = $objReader->load($inputFileName);

                        $sheet = $objPHPExcel->getSheet(0);
                        $highestRow = $sheet->getHighestRow();
                        $highestColumn = $sheet->getHighestDataColumn();
                        $total_column = \PHPExcel_Cell::columnIndexFromString($sheet->getHighestDataColumn());

                        $query = $this->Descriptor->find()->select(['Descriptor.name'])->innerJoinWith('Specie')
                                                          ->where(['Descriptor.specie_id' => $data['especie_id'],
                                                                   'Specie.collection_id' => $data['coleccion_id'],
                                                                   'Descriptor.status' => 1, 'Descriptor.resource_id' => 2])->group('1');

                        $total_columnas = ($query->count()) + 4;

                        if($total_column == $total_columnas)
                        {
                            $columnas = $query->toArray();

                            foreach ($columnas as $value) {
                                $columnas_[] = $value['name'];
                            }

                            array_unshift($columnas_, 'CÓDIGO DE ACCESIÓN', 'NOMBRE DE LA ACCESIÓN', 'AÑO DE CAMPAÑA');
                            array_push($columnas_, 'OBSERVACIÓN');

                            foreach ($columnas_ as $value) {
                                $columnas_final[] = $value;
                            }

                            $cont = 0;
                            for ($row = 1; $row < 2; $row++){

                                $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                for ($i=0; $i < $total_columnas; $i++) {

                                    if($columnas_final[$i] == $rowData[0][$i]){
                                        $cont++;
                                    }
                                }
                            }

                            /************************ SE VERIFICA LOS NOMBRES DE LAS CABECERAS ***********************/
                            if($cont == $total_columnas){

                                $list_annios = [];
                                for ($row = 2; $row <= $highestRow; $row++){
                                    $temp_annio = $sheet->getCell('C'.$row)->getValue();

                                    if($temp_annio != '' && $temp_annio != NULL)
                                        $list_annios[] = $temp_annio;
                                }

                                //********************************* SE VERIFICA QUE EL AÑO SEA UNICO **********************************//
                                if(count(array_unique($list_annios)) == 1)
                                {
                                    /******** SE ELIMINA LOS REGISTROS ANTERIORES ********/
                                    $sql_1 = $conn->prepare(" DELETE FROM temp_caracterizacion WHERE resource_id = 2 AND specie_name = ? AND collection_name = ? AND user_id = ? ");
                                    $sql_1->bindValue(1, $data['especie_id'], PDO::PARAM_INT);
                                    $sql_1->bindValue(2, $data['coleccion_id'], PDO::PARAM_INT);
                                    $sql_1->bindValue(3, $user_id, PDO::PARAM_INT);
                                    $sql_1->execute();

                                    $contador = 0;

                                    for ($row = 2; $row <= $highestRow; $row++){

                                        $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                        for ($i=3; $i < ($total_columnas-1); $i++) {

                                            if( ($rowData[0][0] != '' || $rowData[0][0] != NULL) && ($rowData[0][2] != '' || $rowData[0][2] != NULL) ){

                                                $temp = TableRegistry::get('TempCaracterizacion');
                                                $temp_caract = $temp->newEntity();

                                                $temp_caract->val_error_annio   = 0;
                                                $temp_caract->passport_accenumb = $rowData[0][0];
                                                $temp_caract->passport_othenumb = $rowData[0][1];
                                                $temp_caract->annio_periodo     = $rowData[0][2];
                                                $temp_caract->descriptor_name   = $columnas_final[$i];
                                                $temp_caract->valor             = $rowData[0][$i];
                                                $temp_caract->observation       = $rowData[0][$total_columnas-1];
                                                $temp_caract->resource_id       = '2';
                                                $temp_caract->specie_name       = $data['especie_id'];
                                                $temp_caract->collection_name   = $data['coleccion_id'];
                                                $temp_caract->user_id           = $user_id;
                                                $temp->save($temp_caract);

                                                $contador++;
                                            }
                                        }
                                    }

                                    if($contador > 0){

                                        /*************** EJECUCION DE LA VALIDACION **************/
                                        $stmt = $conn->prepare(' CALL usp_import_caracterizacion(2, 1, ?, ?, ?) ');
                                        $stmt->bindValue(1, $data['especie_id'], PDO::PARAM_INT);
                                        $stmt->bindValue(2, $data['coleccion_id'], PDO::PARAM_INT);
                                        $stmt->bindValue(3, $user_id, PDO::PARAM_INT);
                                        $stmt->execute();

                                        $stmt_1 = $conn->prepare(' CALL usp_import_caracterizacion_table( ?, ?, 2, ? ) ');
                                        $stmt_1->bindValue(1, $data['especie_id'], PDO::PARAM_INT);
                                        $stmt_1->bindValue(2, $data['coleccion_id'], PDO::PARAM_INT);
                                        $stmt_1->bindValue(3, $user_id, PDO::PARAM_INT);
                                        $stmt_1->execute();
                                        $resultado = $stmt_1->fetchAll('assoc');

                                        $x_especie = $data['especie_id'];
                                        $x_coleccion = $data['coleccion_id'];

                                        unlink($inputFileName);

                                        $this->Flash->success(__('Datos de Caracterización importados exitosamente.'));
                                        $this->set(compact('resultado', 'x_especie', 'x_coleccion'));
                                        //return $this->redirect(['action' => 'importCaracterizacion']);

                                    } else {

                                        unlink($inputFileName);
                                        $this->Flash->error(__('El año de campaña es un campo requerido para la caracterización. Por favor, otra vez intente.'));
                                        return $this->redirect(['action' => 'importarCaracterizacion']);
                                    }

                                } else {

                                    unlink($inputFileName);
                                    $this->Flash->error(__('El año de campaña debe ser único para todos los registros. Por favor, otra vez intente.'));
                                    return $this->redirect(['action' => 'importarCaracterizacion']);
                                }

                            } else {

                                unlink($inputFileName);
                                $this->Flash->error(__('Los nombres de las cabeceras del archivo no corresponde al formato. Por favor, otra vez intente.'));
                                return $this->redirect(['action' => 'importarCaracterizacion']);
                            }
                        }
                        else
                        {
                            unlink($inputFileName);
                            $this->Flash->error(__('La cantidad de columnas del archivo no corresponde al formato. Por favor, otra vez intente.'));
                            return $this->redirect(['action' => 'importarCaracterizacion']);
                        }

                    } catch(Exception $e) {

                        $this->Flash->error(__('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage()));
                        return $this->redirect(['action' => 'importarCaracterizacion']);
                    }

                } else {

                    unlink($inputFileName);
                    $this->Flash->error(__('Hubo inconvenientes al cargar el archivo. Por favor, otra vez intente.'));
                    return $this->redirect(['action' => 'importarCaracterizacion']);
                }
            }

            $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts','permiso'));
            $this->set('_serialize', ['descriptor']);

        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);

        }
    }

    public function exportarCaracterizacion()
    {
        if($this->permiso['export']){

            $descriptor = $this->Descriptor->newEntity();

            $mod_parent = $this->mod_parent;
            $mod_padre  = $this->mod_padre;
            $permiso= $this->permiso;

            $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                            ->where(['resource_id' => 2, 'availability' => 1, 'status' => '1'])->order(['colname' => 'ASC']);

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            if ($this->request->is('post')) {

                $data =  $this->request->getData();

                $especie = $this->Specie->find()->where([ 'id' => $data['especie_id'], 'collection_id' => $data['coleccion_id'] ])->first();

                $leyenda = $this->Descriptor->find()->select(['name' => 'Descriptor.name', 'descripcion' => 'Descriptor.title', 'code' => 'DescriptorState.code', 'label' => 'DescriptorState.label'])
                                                        ->innerJoinWith('Specie')
                                                        ->leftJoinWith('DescriptorState')
                                                        ->where(['Descriptor.resource_id' => '2', 'Descriptor.specie_id' => $data['especie_id'],
                                                                 'Descriptor.status' => '1', 'Specie.collection_id' => $data['coleccion_id'], 'Specie.status' => '1'])
                                                        ->order(['Descriptor.name' => 'ASC', 'DescriptorState.code' => 'ASC'])->all();

                $conn = ConnectionManager::get('default');

                $user_id = $this->Auth->User('id');

                /******************************** IMPRESION DEL FORMATO DE CARACTERIZACION *******************************/
                $query = " CALL usp_formato_caracterizacion( ? , ? , 2 ) ";

                $stmt = $conn->prepare($query);
                $stmt->bindValue(1, $data['especie_id']  , PDO::PARAM_INT);
                $stmt->bindValue(2, $data['coleccion_id'], PDO::PARAM_INT);
                $stmt->execute();
                $resultado = $stmt->fetchAll('assoc');

                if(!empty($resultado))
                {

                    /************************************ CREACION DEL EXCEL ***********************************/
                    $objPHPExcel = new \PHPExcel();
                    $objPHPExcel->setActiveSheetIndex(0);

                    //************** Creación de las letras del abecedario *****************//
                    for($i=65; $i<=90; $i++) {
                        $letra[] = chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'A'.chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'B'.chr($i);
                    }
                    for($i=65; $i<=90; $i++) {
                        $letra[] = 'C'.chr($i);
                    }

                    ############################################# css para la tabla ######################################
                    $estiloTabla = array(
                              'font' => array(
                                        'name'     => 'Calibri',
                                        'bold'     => true,
                                        'italic'   => false,
                                        'strike'   => false,
                                        'size'     => 10,
                                        'color' => array(
                                            'rgb' => '000000'
                                        )
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                      'style' => \PHPExcel_Style_Border::BORDER_MEDIUM
                                    )
                                ),
                    );
                    ############################################# /css para la tabla #########################################

                    ############################################# css para la tabla ######################################
                    $estiloTitle = array(
                              'font' => array(
                                        'name'     => 'Calibri',
                                        'bold'     => true,
                                        'italic'   => false,
                                        'strike'   => false,
                                        'size'     => 11,
                                        'color' => array(
                                            'rgb' => '000000'
                                        )
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                      'style' => \PHPExcel_Style_Border::BORDER_MEDIUM
                                    )
                                ),
                                'alignment' =>  array(
                                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                  'rotation'   => 0,
                                  'wrap'       => TRUE
                                )
                    );
                    ############################################# /css para la tabla #########################################

                    ############################################# css para la tabla ######################################
                    $estiloBody = array(
                              'font' => array(
                                        'name'     => 'Calibri',
                                        'bold'     => true,
                                        'italic'   => false,
                                        'strike'   => false,
                                        'size'     => 10,
                                        'color' => array(
                                            'rgb' => '000000'
                                        )
                                ),
                                'borders' => array(
                                    'allborders' => array(
                                      'style' => \PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),
                                'alignment' =>  array(
                                  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                                  'rotation'   => 0,
                                  'wrap'       => TRUE
                                )
                    );
                    ############################################# /css para la tabla #########################################

                    /************** INICIO GENERACION DE LOS TITULOS *****************/
                    $header = array_keys($resultado[0]);

                    $t = 1;

                    for($i=0; $i<count($header); $i++){

                        $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'1', $header[$i]);

                        $t++;
                    }
                    /************** FIN   GENERACION DE LOS TITULOS *****************/

                    /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
                    $celda = 2;
                    for($i=0; $i < count($resultado); $i++){

                        $content = array_values($resultado[$i]);

                        for($j = 0; $j<count($content); $j++){

                            if($j < 3){

                                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
                                $objPHPExcel->getActiveSheet()->getStyle($letra[$j].$celda)->applyFromArray($estiloTabla);

                            } else {

                                $objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $content[$j]);
                            }
                        }

                        $celda ++;
                    }

                    $objPHPExcel->getActiveSheet()->getStyle('A1:'.$letra[$t-2].'1')->applyFromArray($estiloTabla);

                    for($i = 0; $i <= 90; $i++){
                        $objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$i])->setAutoSize(TRUE);
                    }

                    // Se asigna el nombre a la hoja
                    $objPHPExcel->getActiveSheet()->setTitle('ZOOGENÉTICO - CARACTERIZACIÓN');

                    /************************** SEGUNDA HOJA - LEYENDA ***************************/
                    $objPHPExcel->createSheet();
                    $objPHPExcel->setActiveSheetIndex(1);

                    // TITULOS
                    $objPHPExcel->getActiveSheet()->setCellValue('A1', 'DESCRIPTOR');
                    $objPHPExcel->getActiveSheet()->setCellValue('C1', 'ESTADOS');
                    $objPHPExcel->setActiveSheetIndex(1)->mergeCells('A1:B1');
                    $objPHPExcel->setActiveSheetIndex(1)->mergeCells('C1:D1');

                    $list_temp = [];

                    foreach ($leyenda as $key => $value) {
                        $list_temp[] = $value['name'];
                    }

                    $list = array_count_values($list_temp);
                    $list_unique = array_unique($list_temp);

                    $item  = 2;
                    foreach ($leyenda as $key => $value) {

                        $objPHPExcel->getActiveSheet()->setCellValue('A'.$item, $value['name']);
                        $objPHPExcel->getActiveSheet()->setCellValue('B'.$item, $value['descripcion']);
                        $objPHPExcel->getActiveSheet()->setCellValue('C'.$item, $value['code']);
                        $objPHPExcel->getActiveSheet()->setCellValue('D'.$item, $value['label']);

                        $objPHPExcel->getActiveSheet(1)->getStyle('A'.$item)->applyFromArray($estiloTitle);
                        $objPHPExcel->getActiveSheet(1)->getStyle('B'.$item)->applyFromArray($estiloTitle);
                        $objPHPExcel->getActiveSheet(1)->getStyle('C'.$item)->applyFromArray($estiloBody);
                        $objPHPExcel->getActiveSheet(1)->getStyle('D'.$item)->applyFromArray($estiloBody);

                        $item++;
                    }

                    $list_inicio = [];

                    foreach ($list_unique as $key => $value) {
                        $list_inicio[] = $key + 2;
                    }

                    $list_final = [];

                    foreach ($list_unique as $key => $value) {
                        if($key > 0)
                            $list_final[] = $key + 1;
                    }
                    array_push($list_final, (count($leyenda)+1));

                    for ($i=0; $i < count($list_inicio); $i++) {
                        $objPHPExcel->setActiveSheetIndex(1)->mergeCells('A'.$list_inicio[$i].':A'.$list_final[$i]);
                        $objPHPExcel->setActiveSheetIndex(1)->mergeCells('B'.$list_inicio[$i].':B'.$list_final[$i]);
                    }

                    $objPHPExcel->getActiveSheet(1)->getStyle('A1')->applyFromArray($estiloTitle);
                    $objPHPExcel->getActiveSheet(1)->getStyle('B1')->applyFromArray($estiloTitle);
                    $objPHPExcel->getActiveSheet(1)->getStyle('C1')->applyFromArray($estiloTitle);
                    $objPHPExcel->getActiveSheet(1)->getStyle('D1')->applyFromArray($estiloTitle);

                    $objPHPExcel->getActiveSheet(1)->getColumnDimension('A')->setWidth(30);
                    $objPHPExcel->getActiveSheet(1)->getColumnDimension('B')->setWidth(30);
                    $objPHPExcel->getActiveSheet(1)->getColumnDimension('C')->setWidth(20);
                    $objPHPExcel->getActiveSheet(1)->getColumnDimension('D')->setWidth(20);
                    $objPHPExcel->getActiveSheet()->setTitle('LEYENDA');

                    $objPHPExcel->setActiveSheetIndex(0);

                    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                    $filename = "zoo_feno_".$especie['cropname'].".xlsx";
                    header('Content-Disposition: attachment;filename='.$filename .' ');
                    header('Cache-Control: max-age=0');
                    $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
                    $objWriter->save('php://output');
                    exit;
                }
                else {

                    $this->Flash->error(__('No existen descriptores para la colección y espcie seleccionados.'));
                    return $this->redirect(['action'=> 'importarCaracterizacion']);
                }
            }

            $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts','permiso'));
            $this->set('_serialize', ['descriptor']);
        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);

        }
    }

    public function cargarCaracterizacion()
    {

        $descriptor = $this->Descriptor->newEntity();

        $mod_parent = $this->mod_parent;
        $mod_padre  = $this->mod_padre;

        $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                        ->where(['resource_id' => 2, 'status' => '1', 'availability' => '1'])->order(['colname' => 'ASC']);

        /******************************** CARGA DE CARACTERIZACION EN LAS TABLAS CORRESPONDIENTES *******************************/
        if ($this->request->is('post')) {

            $data =  $this->request->getData();

            $conn = ConnectionManager::get('default');

            $user_id = $this->Auth->User('id');

            $stmt = $conn->prepare(' CALL usp_import_caracterizacion( 2, 2, ?, ?, ? ) ');
            $stmt->bindValue(1, $data['especie_id'], PDO::PARAM_INT);
            $stmt->bindValue(2, $data['coleccion_id'], PDO::PARAM_INT);
            $stmt->bindValue(3, $user_id, PDO::PARAM_INT);
            $stmt->execute();

            $this->Flash->success(__('Importación de Fenotípica Fitogenético fue realizado satisfactoriamente.'));
            return $this->redirect(['controller' => 'DescriptorZoo', 'action' => 'caracterizacion', 'idx' => $data['especie_id'], 'idy' => $data['coleccion_id'] ]);
        }

        $this->set(compact('descriptor', 'mod_padre', 'mod_parent', 'colecciones', 'scripts'));
        $this->set('_serialize', ['descriptor']);

    }

    /********* Action para la descarga de archivo de plantilla **********/
    public function exportardescriptores()
    {

        if($this->permiso['export']){

            $filePath = WWW_ROOT .'pass_plantillas'. DS . 'formato_descriptores.xlsx';

            $this->response->file($filePath , array('download'=> true));

            return $this->response;
        } else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);

        }
    }

    public function exportarestados()
    {
        if($this->permiso['export']){

            $filePath = WWW_ROOT .'pass_plantillas'. DS . 'formato_descriptores_estados.xlsx';

            $this->response->file($filePath , array('download'=> true));

            return $this->response;
        } else {

            $this->Flash->error(__('Operación denegada.'));
           return $this->redirect(['action' => 'index']);

        }
    }

}
