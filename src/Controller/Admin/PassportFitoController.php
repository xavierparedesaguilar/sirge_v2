<?php

namespace App\Controller\Admin;

//ajuntar la libreria excel 

use App\Controller\Admin\AppController;
use Cake\ORM\TableRegistry;

use Cake\Datasource\ConnectionManager;
use PDO;

/**
 * PassportFito Controller
 *
 * @property \App\Model\Table\PassportFitoTable $PassportFito
 */
class PassportFitoController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Csrf');
        $this->loadModel('Passport');
        $this->loadModel('Resource');
        $this->loadModel('OptionList');
        $this->loadModel('Country');
        $this->loadModel('Station');
        $this->loadModel('Ubigeo');
        $this->loadModel('Specie');
        $this->loadModel('Collection');
        $this->loadModel('TempPassportFito');
        $this->loadModel('ConfigTable');
        $this->modulo = "Datos de pasaporte";
        $this->servidor=false;
        $this->loadModel('Module');
        $this->module = $this->Module->find()->where(['controller' => $this->name])->first();
        if(!empty( $this->module ))
          $this->permiso=$this->Functions->validarModulo($this->module->id);

    }
    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
		
        // $this->paginate = [
        //     // 'limit' => 10,
        //     'contain' => ['Passport'],
        // ];
        if($this->permiso['index']){

            $styles  = ['assets/css/dataTables.bootstrap', 'assets/css/select.bootstrap.min'];
            $scripts = ['assets/js/select2/select2', 'assets/js/datatable/jquery.dataTables.min',
                        'assets/js/datatable/dataTables.bootstrap.min',
                        'assets/js/datatable/dataTables.select.min'];

            $modulo = $this->modulo;
            $permiso= $this->permiso;
	
            $passportFito = $this->PassportFito->find()
			->select(
			['PassportFito.id'
			,'Passport.accenumb'
			,'Passport.instcode'
			,'Passport.othenumb'
			,'Passport.accname'
			,'PassportFito.collnumb'
			,'PassportFito.subtype'
			,'PassportFito.spauthor'
			,'PassportFito.subtaxa'
			,'PassportFito.subtauthor'
			,'PassportFito.acqdate'
			,'Passport.promissory'
			,'Passport.specie_id'
			,'Passport.resource_id'
			,'PassportFito.invitro'
            ,'PassportFito.bseed'
            ,'PassportFito.bfield'
			,'PassportFito.storage'
			,'PassportFito.availability'
			,'Passport.station_current_id'
			,'Passport.station_origin_id'
			])
			->contain('Passport')->where(['Passport.status !=' => '0']);
			
			//debug($passportFito);
			//exit;
			

            //$passportFito = $this->paginate($query);

            $this->set(compact('passportFito', 'modulo','styles','scripts','permiso'));
            $this->set('_serialize', ['passportFito']);

        } else {

              $this->Flash->error(__('Operación denegada.'));
              return $this->redirect($this->Auth->redirectUrl());

        }
    }

    /**
     * View method
     *
     * @param string|null $id Passport Fito id.
     * @return \Cake\Network\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        if($this->permiso['view']){
            $passportFito = $this->PassportFito->find()->contain('Passport.Ubigeo')
                                             ->where(['PassportFito.id'=>$id ,'Passport.status'=>1])->first();
											 
			
            $passport = $this->Passport->find()->where(['id '=>$passportFito->passport_id])->first();
			$lista_promisoria  = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['id' => $passportFito->passport->promissory ])->first();
			$colecciones       = $this->Collection->find('list', ['keyField'=>'id', 'valueField'=> 'colname'])->where(['id' => $passportFito->passport->especiefito->collection_id])->first();
						
            $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

            if($passportFito ==NULL){
                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller'=>'PassportFito']);
            }else{
            $modulo = $this->modulo;
            $permiso= $this->permiso;
            $this->set(compact('passportFito','modulo','permiso','validar','lista_promisoria','colecciones'));
            $this->set('_serialize', ['passportFito']);
            }

        }else {

                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        if($this->permiso['add']){

            $passportFito = $this->PassportFito->newEntity();
            $passport     = $this->Passport->newEntity();

            if ($this->request->is('post')) {

                try
                {
                    $dataSource = \Cake\Datasource\ConnectionManager::get('default');

                    $dataSource->begin();

                    $data =  $this->request->getData();

                    /**** Grabamos el model Pasaporte ***/
										
					$accname['accname'] = $this->Passport->find()->where(['accname' => $data['passport']['accname'] ])->toArray();
					
					if($accname['accname'] !=null){
						
					$data['passport']['accenumb'] = 'PER1'.str_pad($passportFito->passfitogenetico, 6, "0", STR_PAD_LEFT);
					$query_1 = false;
					}
					else {
					
                    $data['passport']['accenumb'] = 'PER1'.str_pad($passportFito->passfitogenetico, 6, "0", STR_PAD_LEFT);
                    $data['passport']['resource_id'] = '1';
                    $data['passport']['status'] = '1';

                    $passport = $this->Passport->patchEntity($passport, $data['passport']);
                    $query_1 = $this->Passport->save($passport);
					}
					
                    /******* Grabamos el modelo detalle Pasaporte fitogenetico *******/

                        $data['passportFito']['passport_id'] = $passport['id'];
                        $data['passportFito']['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));
                        $data['passportFito']['colldate'] = ($data['fecha_recoleccion'] == '' || $data['fecha_recoleccion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_recoleccion']));

                        /****  Carga de Imagenes  ***/
                        $dir_subida = WWW_ROOT.'pass_fitogenetico'.DS;

                        /********* Imagen 1 *********/
                        if(!empty($data['imagen_1'])){

                            $data['imagen_1']['name'] = $data['passport']['accenumb'].'_1.jpg';
                            $fichero_subido_1 = $dir_subida . basename($data['imagen_1']['name']);
                            if(move_uploaded_file($data['imagen_1']['tmp_name'], $fichero_subido_1))
                                $data['passportFito']['accimag1'] = 'pass_fitogenetico/'.$data['passport']['accenumb'].'_1.jpg';
                        }

                        /********* Imagen 2 *********/
                        if(!empty($data['imagen_2'])){

                            $data['imagen_2']['name'] = $data['passport']['accenumb'].'_2.jpg';
                            $fichero_subido_2 = $dir_subida . basename($data['imagen_2']['name']);
                            if(move_uploaded_file($data['imagen_2']['tmp_name'], $fichero_subido_2))
                                $data['passportFito']['accimag2'] = 'pass_fitogenetico/'.$data['passport']['accenumb'].'_2.jpg';
                        }

                        /******** Imagen 3 ********/
                        if(!empty($data['imagen_3'])){

                            $data['imagen_3']['name'] = $data['passport']['accenumb'].'_3.jpg';
                            $fichero_subido_3 = $dir_subida . basename($data['imagen_3']['name']);
                            if(move_uploaded_file($data['imagen_3']['tmp_name'], $fichero_subido_3))
                                $data['passportFito']['accimag3'] = 'pass_fitogenetico/'.$data['passport']['accenumb'].'_3.jpg';
                        }

                        /********* Imagen 4 *********/
                        if(!empty($data['imagen_4'])){

                            $data['imagen_4']['name'] = $data['passport']['accenumb'].'_4.jpg';
                            $fichero_subido_4 = $dir_subida . basename($data['imagen_4']['name']);
                            if(move_uploaded_file($data['imagen_4']['tmp_name'], $fichero_subido_4))
                                $data['passportFito']['accimag4'] = 'pass_fitogenetico/'.$data['passport']['accenumb'].'_4.jpg';
                        }

                    if(!$this->servidor){
                      //Localmente
                      if($data['imagen_1']['error'] != 4){
                        $dir_nuevo_img_1 = '../../inia_web/modulos/es/img/catalogo'.DS.$data['imagen_1']['name'] ;
                        copy($fichero_subido_1 , $dir_nuevo_img_1);
                      }

                      if($data['imagen_1']['error'] != 4){
                        $dir_nuevo_img_2 = '../../inia_web/modulos/en/img/catalogo'.DS.$data['imagen_1']['name'] ;
                        copy($fichero_subido_1 , $dir_nuevo_img_2);
                      }
                    }

                    if($this->servidor){
                      //Servidor
                      if($data['imagen_1']['error'] != 4){
                         $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_1']['name'] ;
                         $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_1']['name'] ;
                         copy($fichero_subido_1 ,$dir_ingles_img);
                         copy($fichero_subido_1 , $dir_spanish_img);
                      }

                      if($data['imagen_2']['error'] != 4){
                         $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_2']['name'] ;
                         $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_2']['name'] ;
                         copy($fichero_subido_2 ,$dir_ingles_img);
                         copy($fichero_subido_2 , $dir_spanish_img);
                      }

                      if($data['imagen_3']['error'] != 4){
                         $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_3']['name'] ;
                         $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_3']['name'] ;
                         copy($fichero_subido_3 ,$dir_ingles_img);
                         copy($fichero_subido_3 , $dir_spanish_img);
                      }

                      if($data['imagen_4']['error'] != 4){
                         $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_4']['name'] ;
                         $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_4']['name'] ;
                         copy($fichero_subido_4 ,$dir_ingles_img);
                         copy($fichero_subido_4 , $dir_spanish_img);
                      }
                    }

                    $passportFito = $this->PassportFito->patchEntity($passportFito, $data['passportFito']);
					
					if($passport['id'] !=null){
                    $query_2 = $this->PassportFito->save($passportFito);
					}

                    if ($query_1 && $query_2) {
						
						$list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-2)];
                                    $action     = $list_module[(count($list_module)-1)];
                                    $station_id = $query_2->id;
                                    $recurso_id = '1';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $dataSource->commit();
                        $this->Flash->success(__('Pasaporte Fitogenético creado satisfactoriamente.'));
                        return $this->redirect(['action' => 'index']);

                    } else {
						if(!$query_1){
                        $this->Flash->error(__('Hubo inconvenientes al crear el Pasaporte Fitogenético. Nombre de la Accesión esta siendo utilizado.'));
                        return $this->redirect(['action' => 'add']);
						}
						else {
                        $dataSource->rollback();
                        $this->Flash->error(__('Hubo inconvenientes al crear el Pasaporte Fitogenético. Por favor, Otra vez intente.'));
                        return $this->redirect(['action' => 'index']);
						}
                    }
                } catch (\Exception $e) {
                    $this->Flash->error(__('Debe completar todos los campos requeridos. Por favor, Otra vez intente.'));
                    return $this->redirect(['action' => 'add']);
                }
            }

            $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

            $tipo_recursos     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['child_id' => 2, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $tipo_conservacion = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 4, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;
            $disp_accesion     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 26, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $lista_promisoria  = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 699, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

            $coordenadas       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 11, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $georref           = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 16, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

            $cond_biologicas   = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 722, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);;

            $fuentes           = $this->OptionList->find()->where(['parent_id' => 44, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;

            $planta_util       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 63, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;
            $planta_uso        = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 75, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;

            $suelo_textura     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 119, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;
            $suelo_pedrego     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 135, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $suelo_color       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 147, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;
            $suelo_ph          = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 139, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);;

            $sis_multilateral  = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 29, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $invitro           = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 32, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $semillas          = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 35, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $campo             = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 38, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
            $adn               = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 41, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

            $station           = $this->Station->find('list', ['keyField' => 'id', 'valueField' => 'eea'])->where(['status' => 1, 'availability' => 1])->order(['eea' => 'ASC']);;
            $departamento      = $this->Ubigeo->find('list', ['keyField' => 'cod_dep', 'valueField' => 'nombre'])->where(['cod_pro' => 0]);
            $paises            = $this->Country->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['status' => 1]);

            $tipo_muestra      = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 383, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

            $colecciones       = $this->Collection->find('list', ['keyField'=>'id', 'valueField'=> 'colname'])
                                                  ->where(['resource_id' => 1, 'status' => 1, 'availability' => 1])->order(['colname' => 'ASC']);
			
            $passpor_validation  = $this->ConfigTable->find()->where(['resource_id' => 1, 'table_name' => 'passport', 'status' => 1])->first();
            $passfito_validation = $this->ConfigTable->find()->where(['resource_id' => 1, 'table_name' => 'passport_fito', 'status' => 1])->first();

            $cadena='';

            if($passpor_validation!=NULL)
                     $cadena.=$passpor_validation->validation;

            if($passpor_validation!=NULL && $passfito_validation!=NULL)
               $cadena.=',';

            if($passfito_validation!=NULL)
               $cadena.=$passfito_validation->validation;

            $lista=explode(',', $cadena);

            $modulo = $this->modulo;

            $this->set(compact('passportFito', 'passport', 'modulo', 'recursos', 'tipo_recursos', 'tipo_conservacion', 'disp_accesion', 'paises',
                               'coordenadas', 'georref', 'cond_biologicas', 'planta_util', 'planta_uso', 'suelo_textura', 'suelo_pedrego',
                               'suelo_color', 'suelo_ph', 'sis_multilateral', 'invitro', 'semillas', 'campo', 'adn', 'station',
                               'departamento', 'scripts', 'fuentes', 'colecciones', 'tipo_muestra', 'passpor_validation', 'passfito_validation','lista_promisoria','lista'));

            $this->set('_serialize', ['passportFito', 'departamento', 'fuentes', 'cond_biologicas', 'colecciones']);

        } else {
                  $this->Flash->error(__('Operación denegada.'));
                  return $this->redirect(['action' => 'index']);
        }

    }

    /**
     * Edit method
     *
     * @param string|null $id Passport Fito id.
     * @return \Cake\Network\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $passportFito = $this->PassportFito->find()->where(['PassportFito.id '=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$passportFito->passport_id])->first();

        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];
		/*debug($this->permiso['edit']);
		exit;*/

        if($this->permiso['edit'] /*&& $validar */){



            if ($passportFito != NULL)
            {
                $passport = $this->Passport->get($passportFito->passport_id, [
                    'contain' => [],
                ]);

                if($passport['status'] == 1){

                    if ($this->request->is(['patch', 'post', 'put'])) {

                        $dataSource = \Cake\Datasource\ConnectionManager::get('default');

                        $dataSource->begin();

                        $data =  $this->request->getData();

                        /**** Grabamos el model Pasaporte ***/
						
						$accname['accname'] = $this->Passport->find()->where(['accname' => $data['passport']['accname'] ])->toArray();
						
						/*if($accname['accname'] !=null){
														
							if($accname['accname'][0]['accenumb']==$passport['accenumb']){
						
								$passport = $this->Passport->patchEntity($passport, $data['passport']);
								$query_1 = $this->Passport->save($passport);
							}
							else
							{
							$query_1 = false;
							}
						}
						else {
                        $passport = $this->Passport->patchEntity($passport, $data['passport']);
						$query_1 = $this->Passport->save($passport);
						}*/
						
						$passport = $this->Passport->patchEntity($passport, $data['passport']);
						$query_1 = $this->Passport->save($passport);

                        /******* Grabamos el modelo detalle Pasaporte fitogenetico *******/

                        $data['passportFito']['acqdate'] = ($data['fecha_aquisicion'] == '' || $data['fecha_aquisicion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_aquisicion']));

                        $data['passportFito']['colldate'] = ($data['fecha_recoleccion'] == '' || $data['fecha_recoleccion'] == NULL) ? NULL : date('Y-m-d', strtotime($data['fecha_recoleccion']));

                        /****  Carga de Imagenes  ***/
                        $dir_subida = WWW_ROOT.'pass_fitogenetico'.DS;

                        /********* Imagen 1 *********/
                        if(!empty($data['imagen_1'])){

                            $data['imagen_1']['name'] = $passport['accenumb'].'_1.jpg';
                            $fichero_subido_1 = $dir_subida . basename($data['imagen_1']['name']);
                            if(move_uploaded_file($data['imagen_1']['tmp_name'], $fichero_subido_1))
                                $data['passportFito']['accimag1'] = 'pass_fitogenetico/'.$data['imagen_1']['name'];
                        }

                        /********* Imagen 2 *********/
                        if(!empty($data['imagen_2'])){

                            $data['imagen_2']['name'] = $passport['accenumb'].'_2.jpg';
                            $fichero_subido_2 = $dir_subida . basename($data['imagen_2']['name']);
                            if(move_uploaded_file($data['imagen_2']['tmp_name'], $fichero_subido_2))
                                $data['passportFito']['accimag2'] = 'pass_fitogenetico/'.$data['imagen_2']['name'];
                        }

                        /******** Imagen 3 ********/
                        if(!empty($data['imagen_3'])){

                            $data['imagen_3']['name'] = $passport['accenumb'].'_3.jpg';
                            $fichero_subido_3 = $dir_subida . basename($data['imagen_3']['name']);
                            if(move_uploaded_file($data['imagen_3']['tmp_name'], $fichero_subido_3))
                                $data['passportFito']['accimag3'] = 'pass_fitogenetico/'.$data['imagen_3']['name'];
                        }

                        /********* Imagen 4 *********/
                        if(!empty($data['imagen_4'])){

                            $data['imagen_4']['name'] = $passport['accenumb'].'_4.jpg';
                            $fichero_subido_4 = $dir_subida . basename($data['imagen_4']['name']);
                            if(move_uploaded_file($data['imagen_4']['tmp_name'], $fichero_subido_4))
                                $data['passportFito']['accimag4'] = 'pass_fitogenetico/'.$data['imagen_4']['name'];
                        }

                        if(!$this->servidor){
                          //Localmente
                          if($data['imagen_1']['error'] != 4){
                            $dir_nuevo_img = '../../inia_web/modulos/es/img/catalogo'.DS.$data['imagen_1']['name'] ;
                            copy($fichero_subido_1 , $dir_nuevo_img);
                          }

                          if($data['imagen_1']['error'] != 4){
                            $dir_nuevo_img = '../../inia_web/modulos/en/img/catalogo'.DS.$data['imagen_1']['name'] ;
                            copy($fichero_subido_1 , $dir_nuevo_img);
                          }
                        }

                        if($this->servidor){
                          //Servidor
                          if($data['imagen_1']['error'] != 4){
                             $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_1']['name'] ;
                             $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_1']['name'] ;
                             copy($fichero_subido_1 ,$dir_ingles_img);
                             copy($fichero_subido_1 , $dir_spanish_img);
                          }

                          if($data['imagen_2']['error'] != 4){
                             $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_2']['name'] ;
                             $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_2']['name'] ;
                             copy($fichero_subido_2 ,$dir_ingles_img);
                             copy($fichero_subido_2 , $dir_spanish_img);
                          }

                          if($data['imagen_3']['error'] != 4){
                             $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_3']['name'] ;
                             $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_3']['name'] ;
                             copy($fichero_subido_3 ,$dir_ingles_img);
                             copy($fichero_subido_3 , $dir_spanish_img);
                          }

                          if($data['imagen_4']['error'] != 4){
                             $dir_ingles_img= '../../../public_html/modulos/en/img/catalogo'.DS.$data['imagen_4']['name'] ;
                             $dir_spanish_img='../../../public_html/modulos/es/img/catalogo'.DS.$data['imagen_4']['name'] ;
                             copy($fichero_subido_4 ,$dir_ingles_img);
                             copy($fichero_subido_4 , $dir_spanish_img);
                          }
                        }

                        $passportFito = $this->PassportFito->patchEntity($passportFito, $data['passportFito']);
						if($passport['id'] !=null){
                        $query_2 = $this->PassportFito->save($passportFito);
						
						}
						
						/*print_r($query_1);
						print_r($query_2);
						exit();*/

                        if ($query_1 && $query_2) {

                            $list_module = explode('/', $this->request->params['_matchedRoute']);

                                    $user_id    = $this->Auth->User('id');
                                    $module     = $list_module[(count($list_module)-3)];
                                    $action     = $list_module[(count($list_module)-2)];
                                    $station_id = $query_2->id;
                                    $recurso_id = '1';

                            $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                            $dataSource->commit();
                            $this->Flash->success(__('Pasaporte Fitogenético actualizado satisfactoriamente.'));
                            return $this->redirect(['action' => 'index']);

                        } else {
							if(!$query_1){
							$this->Flash->error(__('Hubo inconvenientes al crear el Pasaporte Fitogenético. Nombre de la Accesión esta siendo utilizado.'));
							return $this->redirect(['action' => 'index']);
							}
							else {

                            $dataSource->rollback();
                            $this->Flash->error(__('Hubo inconvenientes al actualizar el Pasaporte Fitogenético. Por favor, Otra vez intente.'));

                            return $this->redirect(['action' => 'index']);
							}
                        }
                    }

                    $scripts = ['assets/js/fileinput/fileinput.min','assets/packages/jqueryvalidation/dist/jquery.validate'];

                    $tipo_recursos     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['child_id' => 2, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);
                    $tipo_conservacion = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 4, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);
                    $disp_accesion     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 26, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);
                    $lista_promisoria  = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 699, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

                    $coordenadas       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 11, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);
                    $georref           = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 16, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]]);

                    $cond_biologicas   = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 722, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);

                    $fuentes           = $this->OptionList->find()->where(['parent_id' => 44, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);
                    $fuente_detalle    = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['child_id' => $passportFito->collsrc, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);

                    $planta_util       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 63, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);
                    $planta_uso        = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 75, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]]])->order(['name' => 'ASC']);

                    $suelo_textura     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 119, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);
                    $suelo_pedrego     = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 135, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
                    $suelo_color       = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 147, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);
                    $suelo_ph          = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 139, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ])->order(['name' => 'ASC']);

                    $sis_multilateral  = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 29, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
                    $invitro           = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 32, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
                    $semillas          = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 35, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
                    $campo             = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 38, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);
                    $adn               = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 41, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

                    $tipo_muestra      = $this->OptionList->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['parent_id' => 383, 'status' => 1, 'OR' => [['resource_id' => 1], ['resource_id' => 4]] ]);

                    $station           = $this->Station->find('list', ['keyField' => 'id', 'valueField' => 'eea'])->where(['status' => 1, 'availability' => 1])->order(['eea' => 'ASC']);;

                    $departamento = $this->Ubigeo->find()->where(['cod_pro' => 0]);

                    if($passport->ubigeo_id == NULL || $passport->ubigeo_id == ''){

                        $ubigeo_descrip = '';
                        $provincia_id = '';
                        $provincias = [];
                        $distritos = [];

                    } else {

                        $ubigeo_descrip = $this->Ubigeo->find()->where(['id' => $passport->ubigeo_id])->first();
                        $provincia_id   = $this->Ubigeo->find()->where(['cod_dep'=>$ubigeo_descrip->cod_dep, 'cod_pro'=>$ubigeo_descrip->cod_pro, 'cod_dis'=>0])->first();
                        $provincias     = $this->Ubigeo->find('list', ['keyField' => 'id', 'valueField' => 'nombre'])->where(['cod_dep' => $ubigeo_descrip->cod_dep, 'cod_pro !=' => 0, 'cod_dis' => 0]);
                        $distritos      = $this->Ubigeo->find('list', ['keyField' => 'id', 'valueField' => 'nombre'])->where(['cod_dep' => $ubigeo_descrip->cod_dep, 'cod_pro' => $ubigeo_descrip->cod_pro, 'cod_dis !=' => 0]);
                    }

                    $paises = $this->Country->find('list', ['keyField' => 'id', 'valueField' => 'name'])->where(['status' => 1]);
                    $colecciones = $this->Collection->find('list', ['keyField' => 'id', 'valueField' => 'colname'])
                                                    ->where(['status' => 1, 'availability' => 1, 'resource_id' => 1])->order(['colname' => 'ASC']);

                    $passpor_validation  = $this->ConfigTable->find()->where(['resource_id' => 1, 'table_name' => 'passport', 'status' => 1])->first();
                    $passfito_validation = $this->ConfigTable->find()->where(['resource_id' => 1, 'table_name' => 'passport_fito', 'status' => 1])->first();

                    $cadena='';
					
                    if($passpor_validation!=NULL)
                       $cadena.=$passpor_validation->validation;

                    if($passpor_validation!=NULL && $passfito_validation!=NULL)
                       $cadena.=',';

                    if($passfito_validation!=NULL)
                       $cadena.=$passfito_validation->validation;

                    $lista=explode(',', $cadena);


                    if($passport->specie_id == NULL || $passport->specie_id == ''){

                        $especies = [];
                        $especie_lista = [];

                    } else {

                        $especies = $this->Specie->find()->where(['id' => $passport->specie_id])->first();

                        $especie_lista = $this->Specie->find('list', ['keyField' => 'id',
                                                                      'valueField' => function ($row) {
                                                                            return $row['genus'] . ' ' . $row['species']. ' ' .$row['autor'];
                                                                        }])
                                              ->where(['collection_id' => $especies->collection_id, 'status' => 1]);
                    }

                    $modulo = $this->modulo;

                    /***** Modificando el formato de fechas *******/
                    $passportFito->acqdate = ($passportFito->acqdate == NULL) ? NULL : date('d-m-Y', strtotime($passportFito->acqdate));
                    $passportFito->colldate = ($passportFito->colldate == NULL) ? NULL : date('d-m-Y', strtotime($passportFito->colldate));

                    $this->set(compact('passportFito', 'passport', 'modulo', 'recursos', 'tipo_recursos', 'tipo_conservacion', 'disp_accesion', 'paises',
                                       'coordenadas', 'georref', 'cond_biologicas', 'planta_util', 'planta_uso', 'suelo_textura', 'suelo_pedrego',
                                       'suelo_color', 'suelo_ph', 'sis_multilateral', 'invitro', 'semillas', 'campo', 'adn', 'station',
                                       'departamento', 'scripts', 'fuentes', 'fuente_detalle', 'colecciones', 'especies', 'especie_lista','lista_promisoria', 'ubigeo_descrip',
                                       'provincias', 'distritos', 'provincia_id', 'tipo_muestra', 'passpor_validation', 'passfito_validation','lista'));
                    $this->set('_serialize', ['passportFito', 'departamento', 'fuentes', 'cond_biologicas', 'colecciones']);

                }else {

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index']);

                }

            } else{

                $this->Flash->error(__('Operación denegada.'));
                return $this->redirect(['action' => 'index']);
            }

        } else{

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }

    }

    /**
     * Delete method
     *
     * @param string|null $id Passport Fito id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {

        $passportFito = $this->PassportFito->find()->where(['PassportFito.id '=>$id])->first();
        $passport = $this->Passport->find()->where(['id '=>$passportFito->passport_id])->first();

        $validar=$this->permiso['role_id']==1?true:$this->permiso['station_id']==$passport['station_current_id'];

        if($this->permiso['delete'] /*&& $validar*/ ){


            if ($passportFito != NULL) {

                $this->request->is(['post', 'delete']);

                $passportFito = $this->PassportFito->get($id);

                if($passportFito->validacion > 0 ){

                    $this->Flash->error(__('Imposible eliminar el registro. Hay registros asociados al pasaporte.'));
                    return $this->redirect(['action' => 'index','controller' => 'PassportFito']);

                } else {

                    $passportFito['modified'] = date('Y-m-d H:i:s');

                    $passport = $this->Passport->get($passportFito->passport_id);
                    $passport['status'] = 0;

                    if ($this->Passport->save($passport) && $this->PassportFito->save($passportFito)) {

                        $list_module = explode('/', $this->request->params['_matchedRoute']);

                        $user_id    = $this->Auth->User('id');
                        $module     = $list_module[(count($list_module)-3)];
                        $action     = $list_module[(count($list_module)-2)];
                        $station_id = $passportFito->id;
                        $recurso_id = '1';

                        $this->Functions->saveLogWeb($module, $station_id, $action, $user_id, $recurso_id);

                        $this->Flash->success(__('Pasaporte Fitogenético eliminado satisfactoriamente.'));

                    } else {

                        $this->Flash->error(__('Hubo inconvenientes al eliminar el Pasaporte Fitogenético. Por favor, Otra vez intente.'));
                    }

                    return $this->redirect(['action' => 'index']);
                }

            }else{

                    $this->Flash->error(__('Operación denegada.'));
                    return $this->redirect(['action' => 'index','controller' => 'PassportFito']);
            }

        }else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /********* Action para la carga de archivos de passaporte **********/
    public function import()
    {
        if($this->permiso['import']){

            $passportFito = $this->PassportFito->newEntity();
            $passport = $this->Passport->newEntity();

            if ($this->request->is('post')) {

                $data =  $this->request->getData();

                $especie_id = $data['passport']['specie_id'];

                $especies = $this->Specie->find()->where(['id' => $especie_id])->first();
                $collections = $this->Collection->find()->where(['id' => $especies->collection_id])->first();

                /****  Carga de archivo  ***/
                $dir_subida = WWW_ROOT.'pass_fitogenetico'.DS;
                $fichero_subido = $dir_subida . basename($data['file_carga']['name']);
                $file_input = $data['file_carga']['name'];  // SE CARGA EL NOMBRE DEL ARCHIVO CARGADO

                if(move_uploaded_file($data['file_carga']['tmp_name'], $fichero_subido)){

                    $inputFileName = $fichero_subido;

                    //Read your Excel workbook
                    try {

                        $inputFileType = \PHPExcel_IOFactory::identify($inputFileName);
                        $objReader = \PHPExcel_IOFactory::createReader($inputFileType);
                        $objPHPExcel = $objReader->load($inputFileName);

                        //  Get worksheet dimensions
                        $sheet = $objPHPExcel->getSheet(0);
                        $highestRow = $sheet->getHighestRow();

                        if($highestRow > 2){

                          $highestColumn = $sheet->getHighestColumn();
                          $total_column = \PHPExcel_Cell::columnIndexFromString($sheet->getHighestColumn());

                          //************************* NOMBRES DE LAS CABECERAS ***************************//
                          $header_excel = array('COD. FAO','NOMBRE DE LA ACCESIÓN','OTRO CÓDIGO ACCESIÓN','ESTACIÓN EXPERIMENTAL',
                                                'ESTACIÓN EXPERIMENTAL DE PROCEDENCIA','PAÍS ORIGEN','DEPARTAMENTO','PROVINCIA','DISTRITO',
                                                'LOCALIDAD','PROMISORIA','SUBTIPO DE RECURSO','CÓDIGO DE COLECTA','AUTORÍA DE LA ESPECIE',
                                                'SUBTAXONES','AUTORÍA DE LOS SUBTAXONES','TIPO CONSERVACIÓN','FECHA ADQUISICIÓN',
                                                'DISPONIBILIDAD DE LA ACCESIÓN','UBICACIÓN DEL SITIO','LATITUD','LONGITUD','ELEVACIÓN',
                                                'TIPO COORDENADAS','MÉTODO DE GEOREFERENCIACIÓN','INCERTIDUMBRE DE COORDENADAS',
                                                'CÓDIGO DEL INSTITUTO DE COLECTA','NOMBRE DEL COLECTOR','DIRECCIÓN DEL COLECTOR',
                                                'MISIÓN DE COLECTA','FUENTE','FUENTE DETALLE','CONDICIÓN BIOLÓGICA (DETALLE)','FECHA DE RECOLECCIÓN',
                                                'NOMBRE LOCAL DEL MATERIAL','GRUPO ÉTNICO','TIPO DE MUESTRA','NÚMERO DE PLANTAS MUESTREADAS',
                                                'TIPO DE MUESTREO','PARTE ÚTIL DE LA PLANTA','USO DE LA PLANTA','ÁREA DE LA COLECTA','PATÓGENO',
                                                'CÓDIGO DEL DONANTE','NOMBRE DEL DONANTE','DIRECCIÓN DEL DONANTE','CÓDIGO DE ACCESIÓN DEL DONANTE',
                                                'HUMEDAD AMBIENTE','TEMPERATURA AMBIENTE','PRESIÓN ATMOSFERICA','PRECIPITACIÓN','TEXTURA DEL SUELO',
                                                'PEDREGOCIDAD DEL SUELO','COLOR DEL SUELO','PH DEL SUELO','RELIEVE DEL SUELO','ANCESTRO MATERNO',
                                                'ANCESTRO PATERNO','DATOS ANCESTRALES','SISTEMA MULTILATERAL','PATENTE',
                                                'CÓDIGO DEL INSTITUTO DE MEJORAMIENTO','NOMBRE DEL INSTITUTO DE MEJORAMIENTO',
                                                'NOMBRE DEL LUGAR - DUPLICADOS DE SEGURIDAD','UBICACIÓN - DUPLICADOS DE SEGURIDAD','BANCO IN VITRO',
                                                'BANCO DE SEMILLAS','BANCO CAMPO','CONSERVACIÓN IN SITU','BANCO ADN','ANOTACIONES');

                          if($total_column == 71)
                          {
                              $cont = 0;
                              for ($row = 2; $row < 3; $row++){

                                  $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                  for ($i=0; $i < $total_column; $i++) {

                                      if($header_excel[$i] == trim($rowData[0][$i])){
                                          $cont++;
                                      }
                                  }
                              }

                              /************************ SE VERIFICA LOS NOMBRES DE LAS CABECERAS ***********************/
                              if($cont == $total_column){

                                  $conn = ConnectionManager::get('default');

                                  $uid = $this->Auth->User('id');

                                  /******** SE ELIMINA LOS REGISTROS ANTERIORES ********/
                                  $sql_1 = $conn->prepare(" DELETE FROM temp_passport_fito WHERE resource_id = 1 AND user_id = ? ");
                                  $sql_1->bindValue(1, $uid, PDO::PARAM_STR);
								  /*print_r($uid);
								  exit();*/
                                  $sql_1->execute();
								  /*debug($uid);
								  exit();*/
                                  //  Loop through each row of the worksheet in turn
                                  for ($row = 3; $row <= $highestRow; $row++){
                                      //  Read a row of data into an array
                                      $rowData = $sheet->rangeToArray('A' . $row . ':' . $highestColumn . $row, NULL, TRUE, FALSE);

                                      $temp = TableRegistry::get('TempPassportFito');
                                      $temp_passport = $temp->newEntity();

                                      $temp_passport->coleccion         = $collections->colname;
                                      $temp_passport->nombre_especie    = $especies->species;
                                      $temp_passport->nombre_comun      = $especies->cropname;
                                      $temp_passport->genero_especie    = $especies->genus;
                                      $temp_passport->instcode          = $rowData[0][0];
                                      $temp_passport->accname           = $rowData[0][1];
                                      $temp_passport->othenumb          = $rowData[0][2];
                                      $temp_passport->station_current_id= $rowData[0][3];
                                      $temp_passport->station_origin_id = $rowData[0][4];
                                      $temp_passport->pais              = $rowData[0][5];
                                      $temp_passport->departamento      = $rowData[0][6];
                                      $temp_passport->provincia         = $rowData[0][7];
                                      $temp_passport->distrito          = $rowData[0][8];
                                      $temp_passport->localidad         = $rowData[0][9];
                                      $temp_passport->promissory        = $rowData[0][10];
                                      $temp_passport->subtype           = $rowData[0][11];
                                      $temp_passport->collnumb          = $rowData[0][12];
                                      $temp_passport->spauthor          = $rowData[0][13];
                                      $temp_passport->subtaxa           = $rowData[0][14];
                                      $temp_passport->subtauthor        = $rowData[0][15];
                                      $temp_passport->storage           = $rowData[0][16];

                                      if($rowData[0][17] == '' || $rowData[0][17] == NULL){

                                          $temp_passport->acqdate = $rowData[0][17];

                                      } else {
                                          // utilizo la función y obtengo el timestamp
                                          $timestamp_1 = \PHPExcel_Shared_Date::ExcelToPHP($rowData[0][17]);
                                          $fecha_php_1 = gmdate("Y-m-d", $timestamp_1);
                                          $temp_passport->acqdate = $fecha_php_1;
                                      }

                                      $temp_passport->availability      = $rowData[0][18];
                                      $temp_passport->collsite          = $rowData[0][19];
                                      $temp_passport->latitude          = $rowData[0][20];
                                      $temp_passport->longitude         = $rowData[0][21];
                                      $temp_passport->elevation         = $rowData[0][22];
                                      $temp_passport->coorddatum        = $rowData[0][23];
                                      $temp_passport->georefmeth        = $rowData[0][24];
                                      $temp_passport->coorduncert       = $rowData[0][25];
                                      $temp_passport->collcode          = $rowData[0][26];
                                      $temp_passport->collname          = $rowData[0][27];
                                      $temp_passport->collinstaddress   = $rowData[0][28];
                                      $temp_passport->collmissind       = $rowData[0][29];
                                      $temp_passport->collsrc           = $rowData[0][30];
                                      $temp_passport->collsrcdet        = $rowData[0][31];
                                      $temp_passport->sampstat          = $rowData[0][32];

                                      if($rowData[0][33] == '' || $rowData[0][33] == NULL){

                                          $temp_passport->colldate = $rowData[0][33];

                                      } else {
                                          // utilizo la función y obtengo el timestamp
                                          $timestamp_2 = \PHPExcel_Shared_Date::ExcelToPHP($rowData[0][33]);
                                          $fecha_php_2 = gmdate("Y-m-d",$timestamp_2);
                                          $temp_passport->colldate = $fecha_php_2;
                                      }

                                      $temp_passport->localname         = $rowData[0][34];
                                      $temp_passport->groupethnic       = $rowData[0][35];
                                      $temp_passport->samptype          = $rowData[0][36];
                                      $temp_passport->sampsize          = $rowData[0][37];
                                      $temp_passport->sampling          = $rowData[0][38];
                                      $temp_passport->plauspart         = $rowData[0][39];
                                      $temp_passport->uso               = $rowData[0][40];
                                      $temp_passport->poparea           = $rowData[0][41];
                                      $temp_passport->pathogen          = $rowData[0][42];
                                      $temp_passport->donorcore         = $rowData[0][43];
                                      $temp_passport->donorname         = $rowData[0][44];
                                      $temp_passport->donaddress        = $rowData[0][45];
                                      $temp_passport->donornumb         = $rowData[0][46];
                                      $temp_passport->humidity          = $rowData[0][47];
                                      $temp_passport->temp              = $rowData[0][48];
                                      $temp_passport->presure           = $rowData[0][49];
                                      $temp_passport->precipitation     = $rowData[0][50];
                                      $temp_passport->soiltext          = $rowData[0][51];
                                      $temp_passport->soilped           = $rowData[0][52];
                                      $temp_passport->soilcol           = $rowData[0][53];
                                      $temp_passport->soilph            = $rowData[0][54];
                                      $temp_passport->soilrel           = $rowData[0][55];
                                      $temp_passport->mancest           = $rowData[0][56];
                                      $temp_passport->pancest           = $rowData[0][57];
                                      $temp_passport->ancest            = $rowData[0][58];
                                      $temp_passport->mlsstat           = $rowData[0][59];
                                      $temp_passport->patent            = $rowData[0][60];
                                      $temp_passport->bredcode          = $rowData[0][61];
                                      $temp_passport->bredname          = $rowData[0][62];
                                      $temp_passport->duplinstname      = $rowData[0][63];
                                      $temp_passport->duplsite          = $rowData[0][64];
                                      $temp_passport->invitro           = $rowData[0][65];
                                      $temp_passport->bseed             = $rowData[0][66];
                                      $temp_passport->bfield            = $rowData[0][67];
                                      $temp_passport->insitu            = $rowData[0][68];
                                      $temp_passport->bdna              = $rowData[0][69];
                                      $temp_passport->remarks           = $rowData[0][70];
                                      $temp_passport->resource_id       = '1';
                                      $temp_passport->user_id           = $uid;
                                      $temp->save($temp_passport);

                                  }

                                  /*************** SE VALIDA Y EJECUTA STORE **************/
                                  $tabla_1 = $this->ConfigTable->find()->where(['table_name' => 'passport', 'resource_id' => 1, 'status' => 1])->count();
                                  $tabla_2 = $this->ConfigTable->find()->where(['table_name' => 'passport_fito', 'resource_id' => 1, 'status' => 1])->count();

                                  $total_result = $tabla_1 + $tabla_2;

                                  if($total_result == 2){

                                      $sql = $conn->prepare(" SELECT CONCAT(TRIM(BOTH ',' FROM REPLACE(REPLACE(a.validation,'specie_id',''),',,',',')),',',(
                                                                                              SELECT b.validation
                                                                                                FROM config_table AS b WHERE b.resource_id = 1
                                                                                                 AND b.table_name = 'passport_fito' AND b.status = 1)) AS valor
                                                                FROM config_table AS a WHERE a.resource_id = 1 AND a.table_name = 'passport' AND a.status = 1");
                                  } else {

                                      if($tabla_1 == 1){

                                          $sql = $conn->prepare(" SELECT TRIM(BOTH ',' FROM REPLACE(REPLACE(a.validation, 'specie_id',''),',,',',')) AS valor
                                                                    FROM config_table AS a WHERE a.resource_id = 1 AND a.table_name = 'passport' AND a.status = 1");
                                      }

                                      if($tabla_2 == 1){

                                          $sql = $conn->prepare(" SELECT b.validation AS valor
                                                                    FROM config_table AS b WHERE b.resource_id = 1 AND b.table_name = 'passport_fito' AND b.status = 1");
                                      }
                                  }
								  
                                  $sql->execute();
                                  $result = $sql->fetch('assoc');

                                  $data_array = explode(',', $result['valor']);
								  /*debug($data_array); 
								  exit();*/
								
                                  $total_data = count($data_array);
                                  //debug($total_data); 
								  //die();
                                  $stmt = $conn->prepare(' CALL usp_valida_import_passport(1, 1, ?, ?, ?, ?) ');
                                  $stmt->bindValue(1, $especie_id, PDO::PARAM_STR);
                                  $stmt->bindValue(2, $especies->collection_id, PDO::PARAM_STR);
                                  $stmt->bindValue(3, $total_data, PDO::PARAM_STR);
                                  $stmt->bindValue(4, $uid, PDO::PARAM_STR);
								  /*debug($stmt);
								  exit();*/
                                  $stmt->execute();

                                  $temp_passport_fito = $this->TempPassportFito->find('all')->where(['user_id' => $uid, 'resource_id' => 1])->toArray();

                                  $this->set(compact('file_input', 'especies', 'collections', 'total_data', 'passportFito', 'passport', 'temp_passport_fito', 'header_excel'));

                                  $this->Flash->success(__('Validación de campos Recurso Fitogenético realizado satisfactoriamente.'));
                                  unlink($inputFileName);

                              } else {

                                  unlink($inputFileName);
                                  $this->Flash->error(__('Los nombres de las cabeceras del archivo no corresponde al formato. Por favor, otra vez intente.'));
                                  return $this->redirect(['action' => 'import']);
                              }

                          } else {

                              unlink($inputFileName);
                              $this->Flash->error(__('El total de columnas es distinta a la plantilla (71). Por favor, Otra vez intente.'));
                              return $this->redirect(['action' => 'import']);
                          }

                        } else {

                            unlink($inputFileName);
                            $this->Flash->error(__('El archivo no contiene registros. Por favor, Otra vez intente.'));
                            return $this->redirect(['action' => 'import']);
                        }

                    } catch(Exception $e) {

                        die('Error loading file "'.pathinfo($inputFileName,PATHINFO_BASENAME).'": '.$e->getMessage());
                    }


                } else {

                    unlink($inputFileName);
                    $this->Flash->error(__('Hubo inconvenientes al cargar el archivo. Por favor, Otra vez intente.'));
                    return $this->redirect(['action' => 'import']);
                }
            }

            $modulo = $this->modulo;
            $permiso= $this->permiso;

            $scripts = ['assets/packages/jqueryvalidation/dist/jquery.validate'];

            $colecciones = $this->Collection->find('list',['keyField' => 'id', 'valueField' => 'colname'])->where(['resource_id' => 1, 'status' => 1, 'availability' => 1])->order(['colname' => 'ASC']);

            $this->set(compact('modulo', 'passportFito', 'colecciones', 'scripts','permiso'));
            $this->set('_serialize', ['passportFito']);

        }else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /************ se graba en la base de datos los registros validos del excel ************/
    public function uploadfile()
    {
        if ($this->request->is('post')) {

            $data =  $this->request->getData();

            $conn = ConnectionManager::get('default');

            $uid = $this->Auth->User('id');

            $stmt = $conn->prepare(' CALL usp_valida_import_passport(2, 1, ?, ?, ?, ?) ');
            $stmt->bindValue(1, $data['especie_id'], PDO::PARAM_STR);
            $stmt->bindValue(2, $data['colection_id'], PDO::PARAM_STR);
            $stmt->bindValue(3, $data['total_data'], PDO::PARAM_STR);
            $stmt->bindValue(4, $uid, PDO::PARAM_STR);
            $stmt->execute();
			
			/*debug($stmt);
			exit();*/

            $this->Flash->success(__('Importación de Pasaporte Fitogenético realizado satisfactoriamente.'));
            return $this->redirect(['action' => 'index']);
        }
    }

    /********* Action para la descarga de archivo de plantilla **********/
    public function export()
    {
        if($this->permiso['export']){
            $filePath = WWW_ROOT .'pass_plantillas'. DS . 'pass_fitogenetico.xlsx';
            $this->response->file($filePath , array('download'=> true));

            return $this->response;

        }else {

            $this->Flash->error(__('Operación denegada.'));
            return $this->redirect(['action' => 'index']);
        }
    }
 
    public function exportartabla() {

        if ($this->request->is('post')) {	
			$data = $this->request->getData();
			$arrayFiltro = explode(",", $data['filtros']);			
			$conn = ConnectionManager::get('default');
			$condicion=" AND Passport.station_current_id=".$this->Auth->User('station_id');
			// Validar si tiene acceso a Ver todas las estaciones experimentales ***************************************************************************			
			if( $this->Auth->user('role_id') == 1 ){
				$condicion = "";
			}else {
				$sqlAcceso ="SELECT estado FROM permiso_estacion AS p WHERE p.idusuario =".$this->Auth->user('id');
				$stmtAcceso = $conn->prepare($sqlAcceso);
				$stmtAcceso->execute();
				
				if( $stmtAcceso->rowCount() > 0){
					$rowAcceso = $stmtAcceso->fetch();
					
					if($rowAcceso[0] == 1){
						$condicion=" ";
					}
				}
			}

			///*********************************	
			
			$sql="SELECT 
				PassportFito.id AS 'N',
                Passport.accenumb AS 'CÓDIGO DE ACCESIÓN',
                Passport.accname AS 'NOMBRE DE LA ACCESION',
                Passport.othenumb AS 'OTRO CODIGO ACCESIÓN',
                PassportFito.collnumb AS 'CODIGO COLECTA',
                Collection.colname AS 'COLECCION',
                CONCAT(Specie.genus,' ',Specie.species,' ',Specie.autor) AS 'NOMBRE CIENTÍFICO',
                Specie.cropname AS '   NOMBRE COMÚN    ',
                (SELECT name FROM option_list where id=PassportFito.subtype) AS 'SUBTIPO DE RECURSO',
				(SELECT name FROM option_list where id=PassportFito.storage) AS 'TIPO CONSERVACIÓN',
                PassportFito.acqdate AS 'FECHA DE AQUISICIÓN',
                
                (SELECT eea FROM station where id=Passport.station_current_id) AS 'ESTACION EXPERIMENTAL',
				(SELECT eea FROM station where id=Passport.station_origin_id) AS 'ESTACION EXPERIMENTAL DE PROCEDENCIA',
                
                case PassportFito.bfield when 39 then'SI' when 40 then 'NO' end  AS '   CAMPO   ',
                case PassportFito.invitro when 33 then'SI' when 34 then 'NO'end AS 'IN VITRO',
                case PassportFito.bseed when 36 then'SI' when 37 then'NO'end AS 'SEMILLA',

				Passport.instcode AS 'CÓDIGO FAO / WIEWS',
                PassportFito.spauthor AS 'AUTORIA DE LA ESPECIE',
				PassportFito.subtaxa AS 'SUBTAXONES ',
				PassportFito.subtauthor AS 'TUTORIA DE LOS SUBTAXONES',
				(SELECT name FROM option_list where id=PassportFito.availability) AS 'DISPONIBILIDAD',
				(SELECT name FROM option_list where id=Passport.promissory) AS 'PROMISORIA',


				(SELECT name FROM country WHERE id=Passport.country_id) AS 'PAIS ORIGEN',
				(SELECT nombre FROM ubigeo WHERE 
					cod_dep=(SELECT cod_dep FROM ubigeo WHERE id=Passport.ubigeo_id)
					and cod_pro=0 and cod_dis=0
				) AS 'DEPARTAMENTO',
				(SELECT nombre FROM ubigeo WHERE 
					cod_dep=(SELECT cod_dep FROM ubigeo WHERE id=Passport.ubigeo_id)
					and cod_pro=(SELECT cod_pro FROM ubigeo WHERE id=Passport.ubigeo_id)
					and cod_dis=0
				) AS 'PROVINCIA',
				(SELECT nombre FROM ubigeo WHERE id=Passport.ubigeo_id) AS 'DISTRITO',
				Passport.localidad AS 'LOCALIDAD',
				PassportFito.collsite AS 'UBICACION DEL SITIO',

				PassportFito.latitude AS 'LATITUD',
				PassportFito.longitude AS 'LONGITUD',
				PassportFito.elevation AS 'ELEVACION',
				(SELECT name FROM option_list WHERE id=PassportFito.coorddatum) AS 'TIPO COORDENADAS',
				(SELECT name FROM option_list WHERE id=PassportFito.georefmeth) AS 'METODO DE GEOREFERENCIACION',
				(SELECT name FROM option_list WHERE id=PassportFito.coorduncert) AS 'INCERTIDUMBRE DE COORDENADAS',

				PassportFito.collcode AS 'CODIGO DEL INSTITUTO DE COLECTA',
				PassportFito.collname AS 'NOMBRE DEL COLECTOR',
				PassportFito.collinstaddress AS 'DIRECCION DEL COLECTOR',
				PassportFito.collmissind AS 'MISION DE COLECTA',
				PassportFito.colldate AS 'FECHA DE COLECTA',
				PassportFito.localname AS 'NOMBRE LOCAL DEL MATERIAL',
				(SELECT name FROM option_list WHERE id=PassportFito.collsrc) AS 'FUENTE',
				(SELECT name FROM option_list WHERE id=PassportFito.collsrcdet) AS 'FUENTE DETALLE',
				(SELECT name FROM option_list WHERE id=PassportFito.sampstat) AS 'CONDICION BIOLOGICA (DETALLE)',
				PassportFito.groupethnic AS 'GRUPO ETNICO',


				(SELECT name FROM option_list WHERE id=PassportFito.samptype) AS 'TIPO DE MUESTRA',
				PassportFito.sampsize AS 'NUMERO DE PLANTAS MUESTREADAS',
				PassportFito.sampling AS 'TIPO DE MUESTREO',
				(SELECT name FROM option_list WHERE id=PassportFito.plauspart) AS 'PARTE ÚTIL DE LA PLANTA',
				(SELECT name FROM option_list WHERE id=PassportFito.uso) AS 'USO DE LA PLANTA',
				PassportFito.poparea AS 'AREA DE LA COLECTA (m2)',
				PassportFito.pathogen AS 'PATOGENO',

                
				PassportFito.donornumb AS 'CODIGO DE ACCESION DEL DONANTE',
				PassportFito.donorcore AS 'CODIGO DEL DONANTE',
				PassportFito.donorname AS 'NOMBRE DEL DONANTE',
				PassportFito.donaddress AS 'DIRECCION DEL DONANTE',

				PassportFito.humidity AS 'HUMEDAD AMBIENTE (%)',
				PassportFito.temp AS 'TEMPERATURA AMBIENTE (C°)',
				PassportFito.presure AS 'PRESION ATMOSFERICA (mmHg)',
				PassportFito.precipitation AS 'PRECIPITACION (mm)',

				(SELECT name FROM option_list WHERE id=PassportFito.soiltext) AS 'TEXTURA DEL SUELO',
				(SELECT name FROM option_list WHERE id=PassportFito.soilped) AS 'PEDREGOCIDAD DEL SUELO',
				(SELECT name FROM option_list WHERE id=PassportFito.soilcol) AS 'COLOR DEL SUELO',
				(SELECT name FROM option_list WHERE id=PassportFito.soilph) AS 'PH DEL SUELO',
				PassportFito.soilrel AS 'RELIEVE DEL SUELO',



				(SELECT name FROM option_list WHERE id=PassportFito.mlsstat) AS 'SISTEMA MULTILATERAL(mls)',
				PassportFito.patent AS 'NOMBRE DEL PATENTE',
				PassportFito.bredcode AS 'CÓDIGO DEL INSTITUTO DE MEJORAMIENTO',
				PassportFito.bredname AS 'NOMBRE DEL INSTITUTO DE MEJORAMIENTO',
				PassportFito.duplinstname AS 'NOMBRE DEL LUGAR - DUPLICADOS DE SEGURIDAD',
				PassportFito.duplsite AS 'DIRECCION - DUPLICADOS DE SEGURIDAD',


				PassportFito.remarks AS 'ANOTACIONES'
			FROM 
				passport_fito PassportFito 
			INNER JOIN 
				passport Passport ON Passport.id = (PassportFito.passport_id)
			INNER JOIN
				specie Specie ON Specie.id=Passport.specie_id
			INNER JOIN
				collection Collection ON Collection.id=Specie.collection_id
			WHERE
				Passport.status != 0 ".$condicion  ;
				
			$filtros="";
				
			if(!empty($arrayFiltro[0])){
				$filtros.=" AND Passport.accenumb LIKE '".$arrayFiltro[0]."%'";
			}
			if(!empty($arrayFiltro[1])){
				$filtros.=" AND Passport.accname LIKE '".$arrayFiltro[1]."%' ";
			}
			if(!empty($arrayFiltro[2])){
				$filtros.=" AND PassportFito.collnumb LIKE '".$arrayFiltro[2]."%' ";
			}
			if(!empty($arrayFiltro[3])){
				$filtros.=" AND Passport.othenumb LIKE '".$arrayFiltro[3]."%' ";
			}
			if(!empty($arrayFiltro[4])){
				$filtros.=" AND Collection.colname LIKE '".$arrayFiltro[4]."%' ";
			}
			if(!empty($arrayFiltro[5])){ 	
				$filtros.=" AND CONCAT(Specie.genus,' ',Specie.species) LIKE '".$arrayFiltro[5]."%' ";
			}
			if(!empty($arrayFiltro[6])){
				$filtros.=" AND Specie.cropname LIKE '".$arrayFiltro[6]."%' ";
			}
			if(!empty($arrayFiltro[7])){
				$filtros.=" AND PassportFito.acqdate LIKE '".$arrayFiltro[7]."%' ";
			}
			if(!empty($arrayFiltro[8])){
				$filtros.=" AND (SELECT name FROM option_list where id=PassportFito.subtype) LIKE '".$arrayFiltro[8]."%' ";
			}
			if(!empty($arrayFiltro[9])){
				$filtros.=" AND (SELECT name FROM option_list where id=PassportFito.storage) LIKE '".$arrayFiltro[9]."%' ";
			}
			if(!empty($arrayFiltro[10])){
				$filtros.=" AND (SELECT eea FROM station where id=Passport.station_current_id) LIKE '".$arrayFiltro[10]."%' ";
			}
			if(!empty($arrayFiltro[11])){
				$filtros.=" AND Passport.instcode LIKE '".$arrayFiltro[11]."%' ";
			}
			if(!empty($arrayFiltro[12])){
				$filtros.=" AND (SELECT name FROM option_list where id=PassportFito.availability) LIKE '".$arrayFiltro[12]."%' ";
			}
			if($filtros==""){
			}
			else{
				$sql.=$filtros. "ORDER BY Passport.id,Passport.accenumb DESC";
			}
				
			$stmtData = $conn->prepare($sql);
			$stmtData->execute();
			
			if( $stmtData->rowCount() >= 1){
				
				$libros = $stmtData->fetchAll(PDO::FETCH_ASSOC);
							 
				$filename = "FDatosPasaporte-".date('Ymd H:i:s').".xlsx"; 
				
				
				/************************************ CREACION DEL EXCEL ***********************************/
				$objPHPExcel = new \PHPExcel();
				$objPHPExcel->setActiveSheetIndex(0);
                              
                
				// Creación de las letras del abecedario
				for($i=65; $i<=90; $i++) {
					$letra[] = chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'A'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'B'.chr($i);
				}
				for($i=65; $i<=90; $i++) {
					$letra[] = 'C'.chr($i);
				}
				
				############################################# css para los titulos ######################################
				$estiloTitle = array(
						  'font' => array(
									'name'     => 'Arial Narrow',
									'bold'     => true,
									'italic'   => false,
									'strike'   => false,
									'size'     => 20,
									'color' => array(
										'rgb' => '000000'
									)
							),
							/*'borders' => array(
										'allborders' => array(
										  'style' => \PHPExcel_Style_Border::BORDER_THIN
										)
									),*/
							'alignment' =>  array(
							  'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
							  'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
							  'rotation'   => 0,
							  'wrap'       => TRUE
							)
				);

                $estiloSubTitle = array(
                    'font' => array(
                              'name'     => 'Arial Narrow',
                              'bold'     => true,
                              'italic'   => false,
                              'strike'   => false,
                              'size'     => 10,
                              'color' => array(
                                  'rgb' => 'ffffff'
                              )
                      ),
                      'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),
                      'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                      )
                );

                $estiloCabezera = array(
                    'font' => array(
                              'name'     => 'Arial Narrow',
                              'bold'     => true,
                              'italic'   => false,
                              'strike'   => false,
                              'size'     => 9,
                              'color' => array(
                                  'rgb' => '000000'
                              )
                      ),
                      'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),
                      'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                      )
                );

                $estiloRegistros = array(
                    'font' => array(
                              'name'     => 'Arial Narrow',
                              'bold'     => false,
                              'italic'   => false,
                              'strike'   => false,
                              'size'     => 10,
                              'color' => array(
                                  'rgb' => '000000'
                              )
                      ),
                      'borders' => array(
                                  'allborders' => array(
                                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                                  )
                              ),
                      'alignment' =>  array(
                        'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY,
                        'vertical'   => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
                        'rotation'   => 0,
                        'wrap'       => TRUE
                      )
                );




				############################################# /css  para los titulos  #########################################
				
				/************** INICIO GENERACION DE LOS TITULOS *****************/
				$header =  array_keys($libros[0]); // array_keys($resultado[0]);
                 
                 // Rename sheet
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A1:BS1");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A1", "FORMATO DATOS PASAPORTE");
                //Subtitulos /// 
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("A2:k2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("A2", "INFORMACIÓN PRINCIPAL");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("L2:M2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("L2", "EEA. DE CONSERVACIÓN Y PROCEDENCIA");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("N2:P2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("N2", "LUGARES DE CONSERVACIÓN");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("Q2:V2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("Q2", "INFORMACIÓN ADICIONAL");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("W2:AB2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("W2", "DATOS DE UBICACIÓN");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AC2:AH2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AC2", "DATOS DE GEOREFERENCIALES");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AI2:AR2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AI2", "INFORMACIÓN DE LA COLECTA");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AS2:AY2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AS2", "INFORMACIÓN DE LA PLANTA");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("AZ2:BC2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("AZ2", "INFORMACIÓN DEL DONANTE");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("BD2:BG2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("BD2", "INFORMACIÓN CONDICIONES CLIMATICAS");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("BH2:BL2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("BH2", "INFORMACIÓN DEL SUELO");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("BM2:BR2");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("BM2", "INFORMACIÓN ADICIONAL");
                $objPHPExcel->setActiveSheetIndex(0)->mergeCells("BS2:BS3");
                $objPHPExcel->setActiveSheetIndex(0)->setCellValue("BS2", "ANOTACIONES/OBSREVACIONES");

                 /** ALTURA DE LA FILA */
                $objPHPExcel->getActiveSheet()->getRowDimension('1')->setRowHeight(40);
                $objPHPExcel->getActiveSheet()->getRowDimension('2')->setRowHeight(30);
                $objPHPExcel->getActiveSheet()->getRowDimension('3')->setRowHeight(25);

                $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(8,4);

				$t = 1;

				for($i=0; $i<count($header); $i++){
					$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$t-1].'3', $header[$i]);
					$objPHPExcel->setActiveSheetIndex(0)->getColumnDimension($letra[$t-1])->setAutoSize(TRUE); 
					$t++;
				}
	 
				$objPHPExcel->getActiveSheet()->getStyle("A1:BS1")->applyFromArray($estiloTitle);
                $objPHPExcel->getActiveSheet()->getStyle("A2:BS2")->applyFromArray($estiloSubTitle);
                $objPHPExcel->getActiveSheet()->getStyle("A3:K3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("L3:M3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("N3:P3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("Q3:V3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("W3:AB3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("AC3:AH3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("AI3:AR3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("AS3:AY3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("AZ3:BC3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("BD3:BG3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("BH3:BL3")->applyFromArray($estiloCabezera);
                $objPHPExcel->getActiveSheet()->getStyle("BM3:BR3")->applyFromArray($estiloCabezera);
                

               /* $objPHPExcel->getActiveSheet()->protectCells('A1:BS2', 'php');
                $objPHPExcel->getActiveSheet()->getProtection()->setSheet(true);*/

				$objPHPExcel->getActiveSheet()
                                        ->getStyle('A2:K2')
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('2F75B5');
                $objPHPExcel->getActiveSheet()
                                        ->getStyle('A3:K3')                                  
                                        ->getFill()
                                        ->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
                                        ->getStartColor()
                                        ->setRGB('D9E1F2');
                                    
			 
				$objPHPExcel->getActiveSheet()
										->getStyle('L2:M2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('70AD47');
                $objPHPExcel->getActiveSheet()
										->getStyle('L3:M3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('E2EFDA');
				
				$objPHPExcel->getActiveSheet()
										->getStyle('N2:P2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('548235');
                $objPHPExcel->getActiveSheet()
										->getStyle('N3:P3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('F2F2F2');
				
				$objPHPExcel->getActiveSheet()
										->getStyle('Q2:V2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('C65911');
                $objPHPExcel->getActiveSheet()
										->getStyle('Q3:V3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('FCE4D6');

				$objPHPExcel->getActiveSheet()
										->getStyle('W2:AB2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('806000');
                $objPHPExcel->getActiveSheet()
										->getStyle('W3:AB3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('FFF2CC');

				$objPHPExcel->getActiveSheet()
										->getStyle('AC2:AH2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('339966');
                $objPHPExcel->getActiveSheet()
										->getStyle('AC3:AH3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('E2EFDA');
			
				$objPHPExcel->getActiveSheet()
										->getStyle('AI2:AR2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('1F4E78');
                $objPHPExcel->getActiveSheet()
										->getStyle('AI3:AR3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('DDEBF7');

				$objPHPExcel->getActiveSheet()
										->getStyle('AS2:AY2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('375623');
                $objPHPExcel->getActiveSheet()
										->getStyle('AS3:AY3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('E2EFDA');

				$objPHPExcel->getActiveSheet()
										->getStyle('AZ2:BC2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('806000');
                $objPHPExcel->getActiveSheet()
										->getStyle('AZ3:BC3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('FFF2CC');
				
				$objPHPExcel->getActiveSheet()
										->getStyle('BD2:BG2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('203764');	
                $objPHPExcel->getActiveSheet()
										->getStyle('BD3:BG3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('D9E1F2');		
				
				$objPHPExcel->getActiveSheet()
										->getStyle('BH2:BL2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('806000');	
                $objPHPExcel->getActiveSheet()
										->getStyle('BH3:BL3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('FFE699');	
				
				$objPHPExcel->getActiveSheet()
										->getStyle('BM2:BR2')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('8497B0');	
                $objPHPExcel->getActiveSheet()
										->getStyle('BM3:BR3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('E7E7FF');	
				
				$objPHPExcel->getActiveSheet()
										->getStyle('BS2:BS3')
										->getFill()
										->setFillType(\PHPExcel_Style_Fill::FILL_SOLID)
										->getStartColor()
										->setRGB('404040');	
				
		      /************************* MOSTRAR FILTROS DE BUSQUEDA ***************************/
              $objPHPExcel->getActiveSheet()->setAutoFilter('A3:BR3');
										
			  /************************* INICIO IMPRESION DEL CONTENIDO ***************************/
				$celda = 4;
				$cnt=1;
				
				for($i=0; $i < count($libros); $i++){

					$content = array_values($libros[$i]);

					for($j = 0; $j<count($content); $j++){
                        $objPHPExcel->getActiveSheet()->getRowDimension($j+4)->setRowHeight(17);
                        $objPHPExcel->getActiveSheet()->getStyle($letra[$j].($celda), $cnt)->applyFromArray($estiloRegistros);

						if($j==0){
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), $cnt);
						$cnt++;}
						else{
                            
						$objPHPExcel->setActiveSheetIndex(0)->setCellValue($letra[$j].($celda), 
                        $content[$j]);}					
					}

					$celda ++;
				}
					
				/************** FIN   *****************/
				header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
				
				header('Content-Disposition: attachment;filename='.$filename .' ');
				header('Cache-Control: max-age=0');
				$objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
				$objWriter->save('php://output');
                exit;
			}
		}
		
		
				
		/************** FIN   *****************/
		$handle = fopen("no_data.txt", "w");
		fwrite($handle, "Consulta sin resultados .....");
		fclose($handle);

		header('Content-Type: application/octet-stream');
		header('Content-Disposition: attachment; filename='.basename('no_data.txt'));
		header('Expires: 0');
		header('Cache-Control: must-revalidate');
		header('Pragma: public');
		header('Content-Length: ' . filesize('no_data.txt'));
		readfile('no_data.txt');
		  
		exit;
	}
	
}
